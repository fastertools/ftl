name: 'Setup FTL CLI'
description: 'Install FTL CLI for building and deploying MCP servers'
author: 'FasterTools'
branding:
  icon: 'cloud'
  color: 'blue'

inputs:
  version:
    description: 'FTL CLI version to install (default: latest)'
    required: false
    default: 'latest'
  
  install-dependencies:
    description: 'Install dependencies (Spin, wkg, Docker) automatically'
    required: false
    default: 'true'
  
  cache-dependencies:
    description: 'Cache installed dependencies'
    required: false
    default: 'true'

outputs:
  ftl-version:
    description: 'The installed FTL CLI version'
    value: ${{ steps.verify.outputs.ftl-version }}

runs:
  using: 'composite'
  steps:
    - name: Setup cache key
      id: cache-key
      shell: bash
      run: |
        # Create cache key based on OS, version, and dependencies flag
        CACHE_KEY="ftl-cli-${{ runner.os }}-${{ inputs.version }}-deps-${{ inputs.install-dependencies }}"
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT

    - name: Cache FTL CLI and dependencies
      if: inputs.cache-dependencies == 'true'
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.local/bin/ftl
          ~/.local/bin/spin  
          ~/.cargo/bin/wkg
          ~/.local/bin/wkg
          ~/.cargo/registry
          ~/.cargo/.crates.toml
          ~/.cargo/.crates2.json
          ~/.cache/ftl
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ftl-cli-${{ runner.os }}-${{ inputs.version }}-
          ftl-cli-${{ runner.os }}-

    - name: Set up Docker Buildx
      if: inputs.install-dependencies == 'true' && steps.cache.outputs.cache-hit != 'true'
      uses: docker/setup-buildx-action@v3

    - name: Install FTL CLI
      id: install
      shell: bash
      run: |
        echo "üì¶ Installing FTL CLI..."
        
        # Skip if cached and exists
        if [ "${{ inputs.cache-dependencies }}" = "true" ] && [ "${{ steps.cache.outputs.cache-hit }}" = "true" ] && command -v ftl >/dev/null 2>&1; then
          echo "‚úÖ FTL CLI found in cache"
          exit 0
        fi
        
        
        # Create local bin directory
        mkdir -p ~/.local/bin
        
        # Determine download URL and version
        if [ "${{ inputs.version }}" = "latest" ]; then
          # Get latest version from GitHub API (check if jq is available first)
          if ! command -v jq >/dev/null 2>&1; then
            echo "‚ùå jq is required but not installed"
            exit 1
          fi
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/fastertools/ftl-cli/releases | jq -r '.[] | select(.tag_name | startswith("cli-v")) | .tag_name' | head -1)
          if [ -z "$LATEST_RELEASE" ]; then
            echo "‚ùå Failed to get latest release"
            exit 1
          fi
          VERSION=${LATEST_RELEASE#cli-v}
          TAG_NAME=${LATEST_RELEASE}
        else
          VERSION="${{ inputs.version }}"
          TAG_NAME="cli-v${VERSION}"
        fi
        
        echo "Installing FTL CLI version: ${VERSION}"
        
        # Detect platform
        OS=$(uname -s)
        ARCH=$(uname -m)
        
        case "$OS" in
          Linux)
            PLATFORM="x86_64-unknown-linux-gnu" ;;
          Darwin)
            case "$ARCH" in
              x86_64|amd64) PLATFORM="x86_64-apple-darwin" ;;
              aarch64|arm64) PLATFORM="aarch64-apple-darwin" ;;
              *) echo "‚ùå Unsupported macOS architecture: $ARCH"; exit 1 ;;
            esac
            ;;
          *)
            echo "‚ùå Unsupported OS: $OS"
            exit 1
            ;;
        esac
        
        # Download FTL CLI binary
        ASSET_NAME="ftl-${PLATFORM}"
        DOWNLOAD_URL="https://github.com/fastertools/ftl-cli/releases/download/${TAG_NAME}/${ASSET_NAME}"
        
        echo "Downloading from: ${DOWNLOAD_URL}"
        echo "Asset name: ${ASSET_NAME}"
        echo "Platform: ${PLATFORM}"
        echo "Version: ${VERSION}"
        echo "Tag name: ${TAG_NAME}"
        
        # Test if URL exists first
        if ! curl -fsSL --head "${DOWNLOAD_URL}" >/dev/null 2>&1; then
          echo "‚ùå Asset not found at URL: ${DOWNLOAD_URL}"
          echo "Available assets for ${TAG_NAME}:"
          curl -s "https://api.github.com/repos/fastertools/ftl-cli/releases/tags/${TAG_NAME}" | jq -r '.assets[].name' || echo "Could not list assets"
          exit 1
        fi
        
        curl -fsSL "${DOWNLOAD_URL}" -o ~/.local/bin/ftl
        
        # Make executable
        chmod +x ~/.local/bin/ftl
        
        # Add to PATH for GitHub Actions and export for current session
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        export PATH="$HOME/.local/bin:$PATH"
        
        # Also add to GITHUB_ENV for persistence across steps
        echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        
        echo "‚úÖ FTL CLI installed"

    - name: Install Spin
      if: inputs.install-dependencies == 'true' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "üì¶ Installing Spin WebAssembly runtime..."
        
        # Skip if already installed
        if command -v spin >/dev/null 2>&1; then
          echo "‚úÖ Spin already installed"
          exit 0
        fi
        
        # Download and install Spin - use consistent system detection
        OS=$(uname -s)
        case "$OS" in
          Linux)
            curl -fsSL https://developer.fermyon.com/downloads/fwf_install.sh | bash
            ;;
          Darwin)
            curl -fsSL https://wasm-functions.fermyon.app/downloads/install.sh | bash
            ;;
        esac
        
        # Move to local bin and add to PATH
        mv ./spin ~/.local/bin/spin
        chmod +x ~/.local/bin/spin
        
        # Verify installation
        ~/.local/bin/spin --version
        echo "‚úÖ Spin installed successfully"

    - name: Debug cache paths
      shell: bash
      run: |
        echo "üîç Comprehensive cache debugging..."
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        
        echo "=== ~/.local/bin ==="
        if [ -d ~/.local/bin ]; then
          ls -la ~/.local/bin/
          echo "Size: $(du -sh ~/.local/bin/ 2>/dev/null || echo 'unknown')"
        else
          echo "~/.local/bin does not exist"
        fi
        
        echo "=== ~/.cargo/bin ==="
        if [ -d ~/.cargo/bin ]; then
          ls -la ~/.cargo/bin/
          echo "Size: $(du -sh ~/.cargo/bin/ 2>/dev/null || echo 'unknown')"
        else
          echo "~/.cargo/bin does not exist"
        fi
        
        echo "=== ~/.cargo/registry ==="
        if [ -d ~/.cargo/registry ]; then
          echo "Registry exists - Size: $(du -sh ~/.cargo/registry/ 2>/dev/null || echo 'unknown')"
          echo "Registry contents (top level):"
          ls -la ~/.cargo/registry/ | head -10
        else
          echo "~/.cargo/registry does not exist"
        fi
        
        echo "=== Cargo metadata files ==="
        ls -la ~/.cargo/.crates* 2>/dev/null || echo "No .crates files found"
        
        echo "=== Current tool locations ==="
        echo "ftl: $(which ftl || echo 'not found')"
        echo "spin: $(which spin || echo 'not found')"
        echo "wkg: $(which wkg || echo 'not found')"
        echo "cargo: $(which cargo || echo 'not found')"

    - name: Install wkg
      if: inputs.install-dependencies == 'true' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "üì¶ Installing wkg (WebAssembly package tool)..."
        
        # Skip if already installed  
        if command -v wkg >/dev/null 2>&1; then
          echo "‚úÖ wkg already installed"
          exit 0
        fi
        
        # Try cargo first (if available)
        if command -v cargo >/dev/null 2>&1; then
          cargo install wkg
          echo "‚úÖ wkg installed via cargo"
          exit 0
        fi
        
        # Fallback to binary download
        WKG_VERSION="0.11.0"
        
        OS=$(uname -s)
        ARCH=$(uname -m)
        
        case "$OS" in
          Linux)
            case "$ARCH" in
              x86_64|amd64) WKG_PLATFORM="x86_64-unknown-linux-gnu" ;;
              aarch64|arm64) WKG_PLATFORM="aarch64-unknown-linux-gnu" ;;
              *) echo "‚ùå Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            ;;
          Darwin)
            case "$ARCH" in
              x86_64|amd64) WKG_PLATFORM="x86_64-apple-darwin" ;;
              aarch64|arm64) WKG_PLATFORM="aarch64-apple-darwin" ;;
              *) echo "‚ùå Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            ;;
          *)
            echo "‚ùå Unsupported OS: $OS"
            exit 1
            ;;
        esac
        
        WKG_URL="https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v${WKG_VERSION}/wkg-${WKG_PLATFORM}"
        
        echo "Downloading wkg from: ${WKG_URL}"
        curl -fsSL "${WKG_URL}" -o ~/.local/bin/wkg
        chmod +x ~/.local/bin/wkg
        
        # Verify installation
        ~/.local/bin/wkg --version
        echo "‚úÖ wkg installed successfully"

    - name: Debug wkg installation location
      shell: bash  
      run: |
        echo "üîç wkg installation verification:"
        echo "which wkg: $(which wkg || echo 'not found')"
        echo "~/.cargo/bin/wkg exists: $(test -f ~/.cargo/bin/wkg && echo 'YES' || echo 'NO')"
        echo "~/.local/bin/wkg exists: $(test -f ~/.local/bin/wkg && echo 'YES' || echo 'NO')"
        if [ -f ~/.cargo/bin/wkg ]; then
          echo "~/.cargo/bin/wkg version: $(~/.cargo/bin/wkg --version)"
        fi
        if [ -f ~/.local/bin/wkg ]; then
          echo "~/.local/bin/wkg version: $(~/.local/bin/wkg --version)"
        fi

    - name: Verify FTL CLI installation
      id: verify
      shell: bash
      run: |
        echo "üîç Verifying FTL CLI installation..."
        
        # Check if ftl command is available
        if ! command -v ftl >/dev/null 2>&1; then
          echo "‚ùå FTL CLI not found in PATH"
          exit 1
        fi
        
        # Get version and verify it works
        FTL_VERSION_OUTPUT=$(ftl --version)
        echo "‚úÖ FTL CLI installed: ${FTL_VERSION_OUTPUT}"
        
        # Extract version number for output
        FTL_VERSION=$(echo "${FTL_VERSION_OUTPUT}" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        echo "ftl-version=${FTL_VERSION}" >> $GITHUB_OUTPUT
        
        # Show what's available
        echo ""
        echo "üîç Checking dependencies..."
        
        if command -v spin >/dev/null 2>&1; then
          echo "‚úÖ Spin: $(spin --version)"
        else
          echo "‚ö†Ô∏è  Spin not installed"
        fi
        
        if command -v wkg >/dev/null 2>&1; then
          echo "‚úÖ wkg: $(wkg --version)"
        else
          echo "‚ö†Ô∏è  wkg not installed"
        fi
        
        if command -v docker >/dev/null 2>&1; then
          echo "‚úÖ Docker: $(docker --version)"
          echo "‚úÖ Docker Buildx: $(docker buildx version)"
        else
          echo "‚ö†Ô∏è  Docker not installed"
        fi

    - name: Summary
      shell: bash
      run: |
        echo "## üìã FTL CLI Installation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **FTL CLI Version**: ${{ steps.verify.outputs.ftl-version }}" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Dependencies Installed**: ${{ inputs.install-dependencies }}" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Cached**: ${{ inputs.cache-dependencies }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Ready to use**: `ftl --version` works!" >> $GITHUB_STEP_SUMMARY