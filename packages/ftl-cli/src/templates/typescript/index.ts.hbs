import { ftlTool, Tool, ToolResult, ToolError } from '@fastertools/ftl-sdk-ts';

/**
 * {{description}}
 */
class {{tool_name_class}} extends Tool {
  get name(): string {
    return '{{name}}';
  }

  get description(): string {
    return '{{description}}';
  }

  get inputSchema() {
    return {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: 'Input text to process'
        }
      },
      required: ['input']
    };
  }

  execute(args: { input: string }): ToolResult {
    const { input } = args;
    
    if (!input) {
      throw ToolError.invalidArguments('Input is required');
    }
    
    // TODO: Implement your tool logic here
    const result = `Processed: ${input}`;
    
    return ToolResult.text(result);
  }
}

// Export the class for testing
export { {{tool_name_class}} };

// Register the tool with FTL (only when not in test environment)
if (typeof process === 'undefined' || process.env.NODE_ENV !== 'test') {
  ftlTool(new {{tool_name_class}}());
}