[tox]
envlist = py310,py311,py312,py313,lint,type,coverage-report
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = Run unit tests with pytest
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands = 
    pytest {posargs:tests} --cov=ftl_sdk --cov-report=term-missing --cov-report=xml

[testenv:lint]
description = Run code linting with ruff
skip_install = true
deps = 
    ruff>=0.1.0
commands = 
    ruff check src tests

[testenv:format]
description = Run code formatting with black
skip_install = true
deps = 
    black>=23.0
commands = 
    black src tests

[testenv:format-check]
description = Check code formatting with black
skip_install = true
deps = 
    black>=23.0
commands = 
    black --check src tests

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.0
    types-requests
commands = 
    mypy src

[testenv:coverage-report]
description = Generate coverage report
deps = 
    coverage[toml]>=7.0
skip_install = true
commands = 
    coverage combine
    coverage report
    coverage html

[testenv:safety]
description = Check for security vulnerabilities
skip_install = true
deps = 
    safety
commands = 
    safety check

[testenv:build]
description = Build distribution packages
skip_install = true
deps = 
    build
    twine
commands = 
    python -m build
    twine check dist/*

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

[coverage:run]
source = ftl_sdk
omit = 
    */tests/*
    */test_*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\\bProtocol\\):
    @(abc\\.)?abstractmethod

[coverage:paths]
source =
    src
    */site-packages