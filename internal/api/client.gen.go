// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AppAccessControl.
const (
	AppAccessControlCustom  AppAccessControl = "custom"
	AppAccessControlOrg     AppAccessControl = "org"
	AppAccessControlPrivate AppAccessControl = "private"
	AppAccessControlPublic  AppAccessControl = "public"
)

// Defines values for AppLatestDeploymentStatus.
const (
	AppLatestDeploymentStatusDeployed   AppLatestDeploymentStatus = "deployed"
	AppLatestDeploymentStatusDeploying  AppLatestDeploymentStatus = "deploying"
	AppLatestDeploymentStatusFailed     AppLatestDeploymentStatus = "failed"
	AppLatestDeploymentStatusPending    AppLatestDeploymentStatus = "pending"
	AppLatestDeploymentStatusRolledBack AppLatestDeploymentStatus = "rolled_back"
)

// Defines values for AppStatus.
const (
	AppStatusACTIVE   AppStatus = "ACTIVE"
	AppStatusCREATING AppStatus = "CREATING"
	AppStatusDELETED  AppStatus = "DELETED"
	AppStatusDELETING AppStatus = "DELETING"
	AppStatusFAILED   AppStatus = "FAILED"
	AppStatusPENDING  AppStatus = "PENDING"
)

// Defines values for CreateAppRequestAccessControl.
const (
	CreateAppRequestAccessControlCustom  CreateAppRequestAccessControl = "custom"
	CreateAppRequestAccessControlOrg     CreateAppRequestAccessControl = "org"
	CreateAppRequestAccessControlPrivate CreateAppRequestAccessControl = "private"
	CreateAppRequestAccessControlPublic  CreateAppRequestAccessControl = "public"
)

// Defines values for CreateAppResponseBodyStatus.
const (
	CreateAppResponseBodyStatusACTIVE   CreateAppResponseBodyStatus = "ACTIVE"
	CreateAppResponseBodyStatusCREATING CreateAppResponseBodyStatus = "CREATING"
	CreateAppResponseBodyStatusDELETED  CreateAppResponseBodyStatus = "DELETED"
	CreateAppResponseBodyStatusDELETING CreateAppResponseBodyStatus = "DELETING"
	CreateAppResponseBodyStatusFAILED   CreateAppResponseBodyStatus = "FAILED"
	CreateAppResponseBodyStatusPENDING  CreateAppResponseBodyStatus = "PENDING"
)

// Defines values for CreateDeploymentRequestAccess.
const (
	CreateDeploymentRequestAccessCustom  CreateDeploymentRequestAccess = "custom"
	CreateDeploymentRequestAccessOrg     CreateDeploymentRequestAccess = "org"
	CreateDeploymentRequestAccessPrivate CreateDeploymentRequestAccess = "private"
	CreateDeploymentRequestAccessPublic  CreateDeploymentRequestAccess = "public"
)

// Defines values for CreateDeploymentRequestApplicationAccess.
const (
	CreateDeploymentRequestApplicationAccessCustom  CreateDeploymentRequestApplicationAccess = "custom"
	CreateDeploymentRequestApplicationAccessOrg     CreateDeploymentRequestApplicationAccess = "org"
	CreateDeploymentRequestApplicationAccessPrivate CreateDeploymentRequestApplicationAccess = "private"
	CreateDeploymentRequestApplicationAccessPublic  CreateDeploymentRequestApplicationAccess = "public"
)

// Defines values for CreateDeploymentRequestApplicationAuthProvider.
const (
	CreateDeploymentRequestApplicationAuthProviderCustom CreateDeploymentRequestApplicationAuthProvider = "custom"
	CreateDeploymentRequestApplicationAuthProviderWorkos CreateDeploymentRequestApplicationAuthProvider = "workos"
)

// Defines values for CreateDeploymentRequestAuthProvider.
const (
	CreateDeploymentRequestAuthProviderCustom CreateDeploymentRequestAuthProvider = "custom"
	CreateDeploymentRequestAuthProviderWorkos CreateDeploymentRequestAuthProvider = "workos"
)

// Defines values for CreateDeploymentRequestEnvironment.
const (
	Development CreateDeploymentRequestEnvironment = "development"
	Production  CreateDeploymentRequestEnvironment = "production"
	Staging     CreateDeploymentRequestEnvironment = "staging"
)

// Defines values for CreateDeploymentResponseBodyStatus.
const (
	CreateDeploymentResponseBodyStatusDEPLOYED  CreateDeploymentResponseBodyStatus = "DEPLOYED"
	CreateDeploymentResponseBodyStatusDEPLOYING CreateDeploymentResponseBodyStatus = "DEPLOYING"
	CreateDeploymentResponseBodyStatusFAILED    CreateDeploymentResponseBodyStatus = "FAILED"
)

// Defines values for ListAppsResponseBodyAppsAccessControl.
const (
	Custom  ListAppsResponseBodyAppsAccessControl = "custom"
	Org     ListAppsResponseBodyAppsAccessControl = "org"
	Private ListAppsResponseBodyAppsAccessControl = "private"
	Public  ListAppsResponseBodyAppsAccessControl = "public"
)

// Defines values for ListAppsResponseBodyAppsLatestDeploymentStatus.
const (
	ListAppsResponseBodyAppsLatestDeploymentStatusDeployed   ListAppsResponseBodyAppsLatestDeploymentStatus = "deployed"
	ListAppsResponseBodyAppsLatestDeploymentStatusDeploying  ListAppsResponseBodyAppsLatestDeploymentStatus = "deploying"
	ListAppsResponseBodyAppsLatestDeploymentStatusFailed     ListAppsResponseBodyAppsLatestDeploymentStatus = "failed"
	ListAppsResponseBodyAppsLatestDeploymentStatusPending    ListAppsResponseBodyAppsLatestDeploymentStatus = "pending"
	ListAppsResponseBodyAppsLatestDeploymentStatusRolledBack ListAppsResponseBodyAppsLatestDeploymentStatus = "rolled_back"
)

// Defines values for ListAppsResponseBodyAppsStatus.
const (
	ListAppsResponseBodyAppsStatusACTIVE   ListAppsResponseBodyAppsStatus = "ACTIVE"
	ListAppsResponseBodyAppsStatusCREATING ListAppsResponseBodyAppsStatus = "CREATING"
	ListAppsResponseBodyAppsStatusDELETED  ListAppsResponseBodyAppsStatus = "DELETED"
	ListAppsResponseBodyAppsStatusDELETING ListAppsResponseBodyAppsStatus = "DELETING"
	ListAppsResponseBodyAppsStatusFAILED   ListAppsResponseBodyAppsStatus = "FAILED"
	ListAppsResponseBodyAppsStatusPENDING  ListAppsResponseBodyAppsStatus = "PENDING"
)

// App Application object
type App struct {
	AccessControl *AppAccessControl  `json:"accessControl,omitempty"`
	AllowedRoles  *[]string          `json:"allowedRoles,omitempty"`
	AppId         openapi_types.UUID `json:"appId"`
	AppName       string             `json:"appName"`
	CreatedAt     string             `json:"createdAt"`
	CustomAuth    *struct {
		Audience string `json:"audience"`
		Issuer   string `json:"issuer"`
	} `json:"customAuth,omitempty"`

	// LatestDeployment Latest deployment information for this app
	LatestDeployment *struct {
		CreatedAt          *float32                  `json:"createdAt,omitempty"`
		DeployedAt         *float32                  `json:"deployedAt,omitempty"`
		DeploymentDuration *float32                  `json:"deploymentDuration,omitempty"`
		DeploymentId       string                    `json:"deploymentId"`
		Environment        *string                   `json:"environment,omitempty"`
		Status             AppLatestDeploymentStatus `json:"status"`
		StatusMessage      *string                   `json:"statusMessage,omitempty"`
	} `json:"latestDeployment"`
	OrgId         *string   `json:"orgId,omitempty"`
	ProviderError *string   `json:"providerError,omitempty"`
	ProviderUrl   *string   `json:"providerUrl,omitempty"`
	Status        AppStatus `json:"status"`
	UpdatedAt     string    `json:"updatedAt"`
}

// AppAccessControl defines model for App.AccessControl.
type AppAccessControl string

// AppLatestDeploymentStatus defines model for App.LatestDeployment.Status.
type AppLatestDeploymentStatus string

// AppStatus defines model for App.Status.
type AppStatus string

// CreateAppRequest Request body for creating an app
type CreateAppRequest struct {
	// AccessControl Access control mode for the application
	AccessControl *CreateAppRequestAccessControl `json:"accessControl,omitempty"`

	// AppName The name of the application
	AppName string `json:"appName"`
}

// CreateAppRequestAccessControl Access control mode for the application
type CreateAppRequestAccessControl string

// CreateAppResponseBody Response for successful app creation
type CreateAppResponseBody struct {
	AppId     openapi_types.UUID          `json:"appId"`
	AppName   string                      `json:"appName"`
	CreatedAt string                      `json:"createdAt"`
	Status    CreateAppResponseBodyStatus `json:"status"`
	UpdatedAt string                      `json:"updatedAt"`
}

// CreateAppResponseBodyStatus defines model for CreateAppResponseBody.Status.
type CreateAppResponseBodyStatus string

// CreateDeploymentRequest Request body for creating a deployment
type CreateDeploymentRequest struct {
	// Access Access control override
	Access *CreateDeploymentRequestAccess `json:"access,omitempty"`

	// Application FTL application configuration
	Application struct {
		// Access Access control mode
		Access *CreateDeploymentRequestApplicationAccess `json:"access,omitempty"`

		// Auth Authentication configuration
		Auth *struct {
			JwtAudience *string                                         `json:"jwt_audience,omitempty"`
			JwtIssuer   *string                                         `json:"jwt_issuer,omitempty"`
			OrgId       *string                                         `json:"org_id,omitempty"`
			Provider    *CreateDeploymentRequestApplicationAuthProvider `json:"provider,omitempty"`
		} `json:"auth,omitempty"`

		// Components Application components
		Components *[]struct {
			// Id Component ID
			Id string `json:"id"`

			// Source Registry reference to pushed component (components must be pushed to ECR first)
			Source struct {
				// Package Package path (e.g., app123abc/graph)
				Package string `json:"package"`

				// Registry ECR registry endpoint (e.g., 795394005211.dkr.ecr.us-west-2.amazonaws.com)
				Registry string `json:"registry"`

				// Version Component version (e.g., 0.1.0)
				Version string `json:"version"`
			} `json:"source"`

			// Variables Component-specific variables
			Variables *map[string]string `json:"variables,omitempty"`
		} `json:"components,omitempty"`

		// Description Application description
		Description *string `json:"description,omitempty"`

		// Name Application name
		Name string `json:"name"`

		// Variables Application variables
		Variables *map[string]string `json:"variables,omitempty"`

		// Version Application version
		Version *string `json:"version,omitempty"`
	} `json:"application"`

	// Auth Auth configuration override
	Auth *struct {
		JwtAudience *string                              `json:"jwt_audience,omitempty"`
		JwtIssuer   *string                              `json:"jwt_issuer,omitempty"`
		OrgId       *string                              `json:"org_id,omitempty"`
		Provider    *CreateDeploymentRequestAuthProvider `json:"provider,omitempty"`
	} `json:"auth,omitempty"`

	// Environment Deployment environment
	Environment *CreateDeploymentRequestEnvironment `json:"environment,omitempty"`

	// Variables Environment-specific variables
	Variables *map[string]string `json:"variables,omitempty"`
}

// CreateDeploymentRequestAccess Access control override
type CreateDeploymentRequestAccess string

// CreateDeploymentRequestApplicationAccess Access control mode
type CreateDeploymentRequestApplicationAccess string

// CreateDeploymentRequestApplicationAuthProvider defines model for CreateDeploymentRequest.Application.Auth.Provider.
type CreateDeploymentRequestApplicationAuthProvider string

// CreateDeploymentRequestAuthProvider defines model for CreateDeploymentRequest.Auth.Provider.
type CreateDeploymentRequestAuthProvider string

// CreateDeploymentRequestEnvironment Deployment environment
type CreateDeploymentRequestEnvironment string

// CreateDeploymentResponseBody Response for successful deployment creation
type CreateDeploymentResponseBody struct {
	// AppId Application identifier
	AppId string `json:"appId"`

	// AppName Application name
	AppName string `json:"appName"`

	// AppUrl Application URL once deployed
	AppUrl *string `json:"appUrl,omitempty"`

	// DeploymentId Unique deployment identifier
	DeploymentId string `json:"deploymentId"`

	// Message Status message
	Message string `json:"message"`

	// Status Deployment status
	Status CreateDeploymentResponseBodyStatus `json:"status"`
}

// CreateDeploymentResponseBodyStatus Deployment status
type CreateDeploymentResponseBodyStatus string

// CreateEcrTokenRequest Request body for creating ECR token
type CreateEcrTokenRequest struct {
	// AppId Application ID to create ECR token for
	AppId openapi_types.UUID `json:"appId"`

	// Components Component names to create/ensure repositories for
	Components []string `json:"components"`
}

// CreateEcrTokenResponseBody ECR token response with app-scoped credentials
type CreateEcrTokenResponseBody struct {
	// AppId Original app UUID for reference
	AppId *string `json:"appId,omitempty"`

	// AuthorizationToken Base64 encoded username:password for Docker login
	AuthorizationToken string `json:"authorizationToken"`

	// ExpiresAt Token expiration time in ISO 8601 format
	ExpiresAt string `json:"expiresAt"`

	// PackageNamespace Sanitized namespace for spin deps publish commands
	PackageNamespace *string `json:"packageNamespace,omitempty"`

	// ProxyEndpoint Full ECR endpoint URL
	ProxyEndpoint string `json:"proxyEndpoint"`

	// Region AWS region
	Region string `json:"region"`

	// RegistryUri ECR registry URI without https://
	RegistryUri string `json:"registryUri"`
}

// DeleteAppResponseBody Response for successful app deletion
type DeleteAppResponseBody struct {
	Message string `json:"message"`
}

// ErrorResponse Standard error response format
type ErrorResponse struct {
	Details *[]interface{} `json:"details,omitempty"`
	Error   *string        `json:"error,omitempty"`
	Message string         `json:"message"`
}

// GetAppLogsResponseBody Application logs response
type GetAppLogsResponseBody struct {
	// AppId Application ID
	AppId openapi_types.UUID `json:"appId"`

	// Logs Raw log output from the application
	Logs     string `json:"logs"`
	Metadata struct {
		// Since Time range used for the query
		Since string `json:"since"`

		// Tail Number of lines requested
		Tail float32 `json:"tail"`
	} `json:"metadata"`
}

// GetUserOrgsResponseBody List of user organizations
type GetUserOrgsResponseBody struct {
	// Organizations List of organizations the user belongs to
	Organizations []struct {
		// Id Organization ID from WorkOS
		Id string `json:"id"`

		// Name Organization name
		Name string `json:"name"`
	} `json:"organizations"`
}

// ListAppsResponseBody List of applications with pagination
type ListAppsResponseBody struct {
	Apps []struct {
		AccessControl *ListAppsResponseBodyAppsAccessControl `json:"accessControl,omitempty"`
		AllowedRoles  *[]string                              `json:"allowedRoles,omitempty"`
		AppId         openapi_types.UUID                     `json:"appId"`
		AppName       string                                 `json:"appName"`
		CreatedAt     string                                 `json:"createdAt"`
		CustomAuth    *struct {
			Audience string `json:"audience"`
			Issuer   string `json:"issuer"`
		} `json:"customAuth,omitempty"`

		// LatestDeployment Latest deployment information for this app
		LatestDeployment *struct {
			CreatedAt          *float32                                       `json:"createdAt,omitempty"`
			DeployedAt         *float32                                       `json:"deployedAt,omitempty"`
			DeploymentDuration *float32                                       `json:"deploymentDuration,omitempty"`
			DeploymentId       string                                         `json:"deploymentId"`
			Environment        *string                                        `json:"environment,omitempty"`
			Status             ListAppsResponseBodyAppsLatestDeploymentStatus `json:"status"`
			StatusMessage      *string                                        `json:"statusMessage,omitempty"`
		} `json:"latestDeployment"`
		OrgId         *string                        `json:"orgId,omitempty"`
		ProviderError *string                        `json:"providerError,omitempty"`
		ProviderUrl   *string                        `json:"providerUrl,omitempty"`
		Status        ListAppsResponseBodyAppsStatus `json:"status"`
		UpdatedAt     string                         `json:"updatedAt"`
	} `json:"apps"`
	NextToken *string `json:"nextToken,omitempty"`
}

// ListAppsResponseBodyAppsAccessControl defines model for ListAppsResponseBody.Apps.AccessControl.
type ListAppsResponseBodyAppsAccessControl string

// ListAppsResponseBodyAppsLatestDeploymentStatus defines model for ListAppsResponseBody.Apps.LatestDeployment.Status.
type ListAppsResponseBodyAppsLatestDeploymentStatus string

// ListAppsResponseBodyAppsStatus defines model for ListAppsResponseBody.Apps.Status.
type ListAppsResponseBodyAppsStatus string

// ListComponentsResponseBody List of components for an app
type ListComponentsResponseBody struct {
	AppId      openapi_types.UUID `json:"appId"`
	AppName    string             `json:"appName"`
	Components []struct {
		ComponentName  string  `json:"componentName"`
		Description    *string `json:"description,omitempty"`
		RepositoryName *string `json:"repositoryName,omitempty"`
		RepositoryUri  *string `json:"repositoryUri,omitempty"`
	} `json:"components"`
}

// UpdateComponentsRequest Request body for updating components
type UpdateComponentsRequest struct {
	Components []struct {
		ComponentName string  `json:"componentName"`
		Description   *string `json:"description,omitempty"`
	} `json:"components"`
}

// UpdateComponentsResponseBody Response for successful components update
type UpdateComponentsResponseBody struct {
	Changes struct {
		Created []string `json:"created"`
		Removed []string `json:"removed"`
		Updated []string `json:"updated"`
	} `json:"changes"`
	Components []struct {
		ComponentName  string  `json:"componentName"`
		Description    *string `json:"description,omitempty"`
		RepositoryName *string `json:"repositoryName,omitempty"`
		RepositoryUri  *string `json:"repositoryUri,omitempty"`
	} `json:"components"`
}

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	// Limit Number of items to return (1-100)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NextToken Pagination token from previous response
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// Name Filter by app name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// CreateAppParams defines parameters for CreateApp.
type CreateAppParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// DeleteAppParams defines parameters for DeleteApp.
type DeleteAppParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// GetAppParams defines parameters for GetApp.
type GetAppParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// ListAppComponentsParams defines parameters for ListAppComponents.
type ListAppComponentsParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// UpdateComponentsParams defines parameters for UpdateComponents.
type UpdateComponentsParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// CreateDeploymentParams defines parameters for CreateDeployment.
type CreateDeploymentParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// GetAppLogsParams defines parameters for GetAppLogs.
type GetAppLogsParams struct {
	// Since Time range for logs (e.g., "30m", "1h", "7d", or RFC3339/Unix timestamp)
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// Tail Number of log lines from the end (1-1000)
	Tail *string `form:"tail,omitempty" json:"tail,omitempty"`

	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// CreateEcrTokenParams defines parameters for CreateEcrToken.
type CreateEcrTokenParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// GetUserOrgsParams defines parameters for GetUserOrgs.
type GetUserOrgsParams struct {
	// Authorization Bearer token for authentication
	Authorization string `json:"Authorization"`
}

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody = CreateAppRequest

// UpdateComponentsJSONRequestBody defines body for UpdateComponents for application/json ContentType.
type UpdateComponentsJSONRequestBody = UpdateComponentsRequest

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody = CreateDeploymentRequest

// CreateEcrTokenJSONRequestBody defines body for CreateEcrToken for application/json ContentType.
type CreateEcrTokenJSONRequestBody = CreateEcrTokenRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListApps request
	ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppWithBody request with any body
	CreateAppWithBody(ctx context.Context, params *CreateAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApp(ctx context.Context, params *CreateAppParams, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApp request
	DeleteApp(ctx context.Context, appId openapi_types.UUID, params *DeleteAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, appId openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppComponents request
	ListAppComponents(ctx context.Context, appId openapi_types.UUID, params *ListAppComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateComponentsWithBody request with any body
	UpdateComponentsWithBody(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateComponents(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, body UpdateComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploymentWithBody request with any body
	CreateDeploymentWithBody(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeployment(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppLogs request
	GetAppLogs(ctx context.Context, appId openapi_types.UUID, params *GetAppLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEcrTokenWithBody request with any body
	CreateEcrTokenWithBody(ctx context.Context, params *CreateEcrTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEcrToken(ctx context.Context, params *CreateEcrTokenParams, body CreateEcrTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgs request
	GetUserOrgs(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppWithBody(ctx context.Context, params *CreateAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApp(ctx context.Context, params *CreateAppParams, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApp(ctx context.Context, appId openapi_types.UUID, params *DeleteAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, appId openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppComponents(ctx context.Context, appId openapi_types.UUID, params *ListAppComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppComponentsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateComponentsWithBody(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateComponentsRequestWithBody(c.Server, appId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateComponents(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, body UpdateComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateComponentsRequest(c.Server, appId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentWithBody(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequestWithBody(c.Server, appId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeployment(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequest(c.Server, appId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppLogs(ctx context.Context, appId openapi_types.UUID, params *GetAppLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppLogsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEcrTokenWithBody(ctx context.Context, params *CreateEcrTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEcrTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEcrToken(ctx context.Context, params *CreateEcrTokenParams, body CreateEcrTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEcrTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgs(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAppsRequest generates requests for ListApps
func NewListAppsRequest(server string, params *ListAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewCreateAppRequest calls the generic CreateApp builder with application/json body
func NewCreateAppRequest(server string, params *CreateAppParams, body CreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAppRequestWithBody generates requests for CreateApp with any type of body
func NewCreateAppRequestWithBody(server string, params *CreateAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteAppRequest generates requests for DeleteApp
func NewDeleteAppRequest(server string, appId openapi_types.UUID, params *DeleteAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, appId openapi_types.UUID, params *GetAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewListAppComponentsRequest generates requests for ListAppComponents
func NewListAppComponentsRequest(server string, appId openapi_types.UUID, params *ListAppComponentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewUpdateComponentsRequest calls the generic UpdateComponents builder with application/json body
func NewUpdateComponentsRequest(server string, appId openapi_types.UUID, params *UpdateComponentsParams, body UpdateComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateComponentsRequestWithBody(server, appId, params, "application/json", bodyReader)
}

// NewUpdateComponentsRequestWithBody generates requests for UpdateComponents with any type of body
func NewUpdateComponentsRequestWithBody(server string, appId openapi_types.UUID, params *UpdateComponentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewCreateDeploymentRequest calls the generic CreateDeployment builder with application/json body
func NewCreateDeploymentRequest(server string, appId openapi_types.UUID, params *CreateDeploymentParams, body CreateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeploymentRequestWithBody(server, appId, params, "application/json", bodyReader)
}

// NewCreateDeploymentRequestWithBody generates requests for CreateDeployment with any type of body
func NewCreateDeploymentRequestWithBody(server string, appId openapi_types.UUID, params *CreateDeploymentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetAppLogsRequest generates requests for GetAppLogs
func NewGetAppLogsRequest(server string, appId openapi_types.UUID, params *GetAppLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Since != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tail", runtime.ParamLocationQuery, *params.Tail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewCreateEcrTokenRequest calls the generic CreateEcrToken builder with application/json body
func NewCreateEcrTokenRequest(server string, params *CreateEcrTokenParams, body CreateEcrTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEcrTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateEcrTokenRequestWithBody generates requests for CreateEcrToken with any type of body
func NewCreateEcrTokenRequestWithBody(server string, params *CreateEcrTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/registry/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUserOrgsRequest generates requests for GetUserOrgs
func NewGetUserOrgsRequest(server string, params *GetUserOrgsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAppsWithResponse request
	ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error)

	// CreateAppWithBodyWithResponse request with any body
	CreateAppWithBodyWithResponse(ctx context.Context, params *CreateAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	CreateAppWithResponse(ctx context.Context, params *CreateAppParams, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	// DeleteAppWithResponse request
	DeleteAppWithResponse(ctx context.Context, appId openapi_types.UUID, params *DeleteAppParams, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error)

	// GetAppWithResponse request
	GetAppWithResponse(ctx context.Context, appId openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// ListAppComponentsWithResponse request
	ListAppComponentsWithResponse(ctx context.Context, appId openapi_types.UUID, params *ListAppComponentsParams, reqEditors ...RequestEditorFn) (*ListAppComponentsResponse, error)

	// UpdateComponentsWithBodyWithResponse request with any body
	UpdateComponentsWithBodyWithResponse(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateComponentsResponse, error)

	UpdateComponentsWithResponse(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, body UpdateComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateComponentsResponse, error)

	// CreateDeploymentWithBodyWithResponse request with any body
	CreateDeploymentWithBodyWithResponse(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	CreateDeploymentWithResponse(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	// GetAppLogsWithResponse request
	GetAppLogsWithResponse(ctx context.Context, appId openapi_types.UUID, params *GetAppLogsParams, reqEditors ...RequestEditorFn) (*GetAppLogsResponse, error)

	// CreateEcrTokenWithBodyWithResponse request with any body
	CreateEcrTokenWithBodyWithResponse(ctx context.Context, params *CreateEcrTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEcrTokenResponse, error)

	CreateEcrTokenWithResponse(ctx context.Context, params *CreateEcrTokenParams, body CreateEcrTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEcrTokenResponse, error)

	// GetUserOrgsWithResponse request
	GetUserOrgsWithResponse(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*GetUserOrgsResponse, error)
}

type ListAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAppsResponseBody
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateAppResponseBody
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DeleteAppResponseBody
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListComponentsResponseBody
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateComponentsResponseBody
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreateDeploymentResponseBody
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAppLogsResponseBody
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEcrTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEcrTokenResponseBody
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEcrTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEcrTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserOrgsResponseBody
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAppsWithResponse request returning *ListAppsResponse
func (c *ClientWithResponses) ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error) {
	rsp, err := c.ListApps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppsResponse(rsp)
}

// CreateAppWithBodyWithResponse request with arbitrary body returning *CreateAppResponse
func (c *ClientWithResponses) CreateAppWithBodyWithResponse(ctx context.Context, params *CreateAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateAppWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

func (c *ClientWithResponses) CreateAppWithResponse(ctx context.Context, params *CreateAppParams, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateApp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

// DeleteAppWithResponse request returning *DeleteAppResponse
func (c *ClientWithResponses) DeleteAppWithResponse(ctx context.Context, appId openapi_types.UUID, params *DeleteAppParams, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error) {
	rsp, err := c.DeleteApp(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, appId openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// ListAppComponentsWithResponse request returning *ListAppComponentsResponse
func (c *ClientWithResponses) ListAppComponentsWithResponse(ctx context.Context, appId openapi_types.UUID, params *ListAppComponentsParams, reqEditors ...RequestEditorFn) (*ListAppComponentsResponse, error) {
	rsp, err := c.ListAppComponents(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppComponentsResponse(rsp)
}

// UpdateComponentsWithBodyWithResponse request with arbitrary body returning *UpdateComponentsResponse
func (c *ClientWithResponses) UpdateComponentsWithBodyWithResponse(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateComponentsResponse, error) {
	rsp, err := c.UpdateComponentsWithBody(ctx, appId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateComponentsResponse(rsp)
}

func (c *ClientWithResponses) UpdateComponentsWithResponse(ctx context.Context, appId openapi_types.UUID, params *UpdateComponentsParams, body UpdateComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateComponentsResponse, error) {
	rsp, err := c.UpdateComponents(ctx, appId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateComponentsResponse(rsp)
}

// CreateDeploymentWithBodyWithResponse request with arbitrary body returning *CreateDeploymentResponse
func (c *ClientWithResponses) CreateDeploymentWithBodyWithResponse(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeploymentWithBody(ctx, appId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateDeploymentWithResponse(ctx context.Context, appId openapi_types.UUID, params *CreateDeploymentParams, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeployment(ctx, appId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

// GetAppLogsWithResponse request returning *GetAppLogsResponse
func (c *ClientWithResponses) GetAppLogsWithResponse(ctx context.Context, appId openapi_types.UUID, params *GetAppLogsParams, reqEditors ...RequestEditorFn) (*GetAppLogsResponse, error) {
	rsp, err := c.GetAppLogs(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppLogsResponse(rsp)
}

// CreateEcrTokenWithBodyWithResponse request with arbitrary body returning *CreateEcrTokenResponse
func (c *ClientWithResponses) CreateEcrTokenWithBodyWithResponse(ctx context.Context, params *CreateEcrTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEcrTokenResponse, error) {
	rsp, err := c.CreateEcrTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEcrTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateEcrTokenWithResponse(ctx context.Context, params *CreateEcrTokenParams, body CreateEcrTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEcrTokenResponse, error) {
	rsp, err := c.CreateEcrToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEcrTokenResponse(rsp)
}

// GetUserOrgsWithResponse request returning *GetUserOrgsResponse
func (c *ClientWithResponses) GetUserOrgsWithResponse(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*GetUserOrgsResponse, error) {
	rsp, err := c.GetUserOrgs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgsResponse(rsp)
}

// ParseListAppsResponse parses an HTTP response from a ListAppsWithResponse call
func ParseListAppsResponse(rsp *http.Response) (*ListAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAppsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAppResponse parses an HTTP response from a CreateAppWithResponse call
func ParseCreateAppResponse(rsp *http.Response) (*CreateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateAppResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAppResponse parses an HTTP response from a DeleteAppWithResponse call
func ParseDeleteAppResponse(rsp *http.Response) (*DeleteAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DeleteAppResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAppComponentsResponse parses an HTTP response from a ListAppComponentsWithResponse call
func ParseListAppComponentsResponse(rsp *http.Response) (*ListAppComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListComponentsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateComponentsResponse parses an HTTP response from a UpdateComponentsWithResponse call
func ParseUpdateComponentsResponse(rsp *http.Response) (*UpdateComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateComponentsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDeploymentResponse parses an HTTP response from a CreateDeploymentWithResponse call
func ParseCreateDeploymentResponse(rsp *http.Response) (*CreateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreateDeploymentResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAppLogsResponse parses an HTTP response from a GetAppLogsWithResponse call
func ParseGetAppLogsResponse(rsp *http.Response) (*GetAppLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAppLogsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEcrTokenResponse parses an HTTP response from a CreateEcrTokenWithResponse call
func ParseCreateEcrTokenResponse(rsp *http.Response) (*CreateEcrTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEcrTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEcrTokenResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserOrgsResponse parses an HTTP response from a GetUserOrgsWithResponse call
func ParseGetUserOrgsResponse(rsp *http.Response) (*GetUserOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserOrgsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
