// Code generated by ui/generate.go. DO NOT EDIT.

package ui

// Process display names
const (
	ProcessNameRegular = "FTL Process"
	ProcessNameWatch   = "Watch Mode"
	ProcessNameBuild   = "Build Process"
	ProcessNameNone    = "No Active Process"
)

// Status strings
const (
	StatusStopped  = "Stopped"
	StatusRunning  = "Running"
	StatusInactive = "Inactive"
	StatusStarting = "Starting..."
	StatusStopping = "Stopping..."
	StatusBuilding = "Building..."
	StatusError    = "Error"
)

// WebUI contains all web interface strings
var WebUI = struct {
	Titles   map[string]string
	Tabs     map[string]string
	Buttons  map[string]string
	Messages map[string]string
	Forms    map[string]string
}{
	Titles: map[string]string{
		"main":           "FTL Control Center",
		"control_center": "Control Center",
		"projects":       "Projects",
		"activity":       "Activity",
		"project_info":   "Project Info",
		"tools":          "Available Tools",
	},
	Tabs: map[string]string{
		"live_logs":      "Live Logs",
		"command_output": "Command Output",
	},
	Buttons: map[string]string{
		"build":       "Build",
		"up":          "Up",
		"watch":       "Watch",
		"stop":        "Stop",
		"clear":       "Clear",
		"add_project": "+ Add Project",
		"cancel":      "Cancel",
		"remove":      "Remove",
		"parameters":  "Parameters",
	},
	Messages: map[string]string{
		"waiting_logs":    "Waiting for log output...",
		"ready_commands":  "Ready to execute commands...",
		"loading_tools":   "Loading tools...",
		"no_tools":        "No tools available",
		"no_parameters":   "No parameters",
		"sending_build":   "Sending build command...",
		"starting_server": "Starting FTL server...",
		"starting_watch":  "Starting FTL in watch mode...",
	},
	Forms: map[string]string{
		"project_name":   "Project name",
		"project_path":   "/path/to/project",
		"confirm_remove": "Remove this project?",
	},
}

// CLI contains all command-line interface strings
var CLI = struct {
	Commands map[string]struct {
		Short string
		Long  string
	}
	Messages map[string]string
	Errors   map[string]string
	Flags    map[string]string
}{
	Commands: map[string]struct {
		Short string
		Long  string
	}{
		"build": {
			Short: "Build the FTL application",
			Long:  "Build compiles the FTL application and its components.",
		},
		"up": {
			Short: "Run the FTL application locally",
			Long:  "Run the FTL application locally with hot reload support.",
		},
		"deploy": {
			Short: "Deploy the FTL application to the platform",
			Long:  "Deploy the FTL application to the platform.\n\nThis command:\n1. Reads your FTL configuration (ftl.yaml, ftl.json, or app.cue)\n2. Builds local components\n3. Creates/updates the app on FTL platform\n4. Pushes built components to the registry\n5. Sends the FTL config to the platform for deployment\n6. Platform synthesizes Spin manifest and deploys\n\nExample:\n  ftl deploy\n  ftl deploy --access-control private\n  ftl deploy --jwt-issuer https://auth.example.com --jwt-audience api.example.com\n  ftl deploy --dry-run",
		},
	},
	Messages: map[string]string{
		"synthesizing":   "Synthesizing spin.toml from %s",
		"generated":      "Generated spin.toml",
		"building":       "Building FTL application...",
		"build_complete": "Build completed successfully",
		"starting":       "Starting FTL application...",
		"watch_mode":     "Starting with watch mode...",
	},
	Errors: map[string]string{
		"no_config":        "no ftl.yaml, ftl.json, app.cue, or spin.toml found. Run 'ftl init' first",
		"no_spin_toml":     "no spin.toml found. Run 'ftl synth' or 'ftl build' without --skip-synth first",
		"build_failed":     "Build failed: %s",
		"synthesis_failed": "Synthesis failed: %s",
	},
	Flags: map[string]string{
		"build":      "Build before running",
		"watch":      "Watch for changes and reload",
		"config":     "Configuration file to synthesize (auto-detects if not specified)",
		"skip_synth": "Skip synthesis of spin.toml from FTL config",
		"env":        "Pass an environment variable (key=value) to all components of the application",
	},
}

// MCP contains all MCP server strings
var MCP = struct {
	Server struct {
		Name        string
		Description string
	}
	Tools map[string]struct {
		Name        string
		Description string
	}
	Messages map[string]string
	Errors   map[string]string
}{
	Server: struct {
		Name        string
		Description string
	}{
		Name:        "mcp-server",
		Description: "FTL server - handles ftl up operations in regular and watch modes",
	},
	Tools: map[string]struct {
		Name        string
		Description string
	}{
		"up": {
			Name:        "mcp-server__up",
			Description: "Run ftl up in regular or watch mode",
		},
		"stop": {
			Name:        "mcp-server__stop",
			Description: "Stop any running FTL process (watch or regular mode)",
		},
		"build": {
			Name:        "mcp-server__build",
			Description: "Run ftl build command",
		},
		"status": {
			Name:        "mcp-server__get_status",
			Description: "Get current status of FTL processes",
		},
		"components": {
			Name:        "mcp-server__list_components",
			Description: "List all components in the FTL project",
		},
		"logs": {
			Name:        "mcp-server__get_logs",
			Description: "Get logs from running watch process",
		},
	},
	Messages: map[string]string{
		"already_running": "FTL process already running in %s mode",
		"process_started": "Started 'ftl up%s%s' in project: %s",
		"initial_output":  "Initial output:",
		"build_failed":    "Build failed: %s",
		"process_stopped": "FTL Process stopped: %s",
	},
	Errors: map[string]string{
		"empty_address":   "empty listen address",
		"invalid_address": "invalid listen address format: %s",
		"port_out_range":  "port %d is out of valid range (1-65535)",
		"process_exists":  "Process already exists",
		"failed_action":   "Failed to %s: %s",
	},
}

// Handlers contains all HTTP handler messages
var Handlers = struct {
	Errors  map[string]string
	Success map[string]string
}{
	Errors: map[string]string{
		"method_not_allowed":    "Method not allowed",
		"parse_form_failed":     "Failed to parse form",
		"no_projects":           "No projects configured",
		"project_path_required": "Error: project_path required",
		"process_type_required": "Error: project_path and process_type required",
		"invalid_path":          "Invalid path",
		"invalid_index":         "Invalid index",
		"no_current_project":    "No current project",
		"no_running_server":     "No running server",
		"failed_get_tools":      "Failed to get tools",
		"tool_not_found":        "Tool not found",
		"name_path_required":    "Name and path are required",
		"directory_not_exist":   "Directory does not exist: %s",
		"not_ftl_project":       "Not a valid FTL project: %s",
	},
	Success: map[string]string{
		"projects_reloaded":  "Projects reloaded successfully",
		"build_successful":   "Build successful: %s",
		"build_failed":       "Build failed: %s",
		"process_stopped":    "Process stopped successfully",
		"stop_failed":        "Stop failed: %s",
		"start_failed":       "Start failed: %s",
		"watch_start_failed": "Watch start failed: %s",
	},
}
