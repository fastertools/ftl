# Release Go SDK
#
# WORKFLOW PURPOSE:
# This workflow handles the Go SDK release process when a new version tag is pushed.
# It creates GitHub releases with proper Go module tagging.
#
# FLOW:
# 1. Tag validation and version parsing
# 2. Run tests with build tags to exclude Spin SDK  
# 3. Create GitHub release with dual tagging strategy:
#    - sdk-go-v{version} (release tracking)
#    - sdk/go/v{version} (Go module resolution)
#
# FAILURE HANDLING:
# - Manual workflow dispatch available for retries
# - Template validation handled separately to avoid proxy timing issues
#
name: Release Go SDK

on:
  push:
    tags:
      - 'sdk-go-v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Go SDK tag to release (e.g., sdk-go-v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
            if [[ ! "$TAG" =~ ^sdk-go-v ]]; then
              echo "ERROR: Manual tag must start with 'sdk-go-v'"
              exit 1
            fi
            VERSION="${TAG#sdk-go-v}"
          else
            VERSION="${GITHUB_REF#refs/tags/sdk-go-v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Trigger: ${{ github.event_name }}"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify version matches README
        working-directory: sdk/go
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          README_VERSION=$(grep "^Version: " README.md | cut -d' ' -f2)
          if [ "$README_VERSION" != "$VERSION" ]; then
            echo "ERROR: Tag version ($VERSION) does not match README.md version ($README_VERSION)"
            exit 1
          fi
          echo "SUCCESS: Version matches README.md"

  validate-and-test:
    name: Validate and Test
    needs: verify-tag
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if ! [[ "${{ needs.verify-tag.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "ERROR: Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta1)"
          exit 1
        fi

    - name: Get current version
      id: get_version
      working-directory: sdk/go
      run: |
        # For Go modules, we'll check the latest git tag for this SDK
        current_version=$(git tag -l "sdk-go-v*" --sort=-version:refname | head -n 1 | sed 's|sdk-go-v||')
        if [ -z "$current_version" ]; then
          echo "No existing Go SDK tags found, assuming this is the first release"
          current_version="0.1.0"
        fi
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: ${{ needs.verify-tag.outputs.version }}"

    - name: Check version is newer
      run: |
        current="${{ steps.get_version.outputs.current_version }}"
        new="${{ needs.verify-tag.outputs.version }}"
        
        # Skip version comparison if this is the first release
        if [ "$current" = "0.1.0" ] && [ -z "$(git tag -l 'sdk-go-v*')" ]; then
          echo "SUCCESS: First release - no version comparison needed"
        else
          # Simple version comparison (works for most cases)
          if [ "$(printf '%s\n' "$new" "$current" | sort -V | tail -n1)" != "$new" ]; then
            echo "ERROR: New version ($new) must be higher than current version ($current)"
            exit 1
          fi
          echo "SUCCESS: Version $new is newer than $current"
        fi

  release:
    name: Create Release
    needs: [verify-tag, validate-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate app token
      id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Setup Git
      uses: ./.github/actions/setup-git
      with:
        token: ${{ steps.app-token.outputs.token }}

    - name: Create Go module subdirectory tag
      run: |
        # Create Go module subdirectory tag for proper Go module versioning
        go_module_tag="sdk/go/v${{ needs.verify-tag.outputs.version }}"
        if git tag -l "$go_module_tag" | grep -q "$go_module_tag"; then
          echo "Tag $go_module_tag already exists, skipping creation"
        else
          git tag -a "$go_module_tag" -m "Release Go SDK v${{ needs.verify-tag.outputs.version }}"
          git push origin "$go_module_tag"
          echo "Created and pushed tag $go_module_tag"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}
        name: "Go SDK v${{ needs.verify-tag.outputs.version }}"
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Go SDK v${{ needs.verify-tag.outputs.version }}
          
          ### Installation
          
          ```bash
          go get github.com/fastertools/ftl/sdk/go@v${{ needs.verify-tag.outputs.version }}
          ```
          
          ### Links
          
          - [Go Packages](https://pkg.go.dev/github.com/fastertools/ftl/sdk/go@v${{ needs.verify-tag.outputs.version }})
          - [Documentation](https://github.com/fastertools/ftl/tree/main/sdk/go)

    - name: Report module information
      run: |
        echo ""
        echo "Go module users can import with:"
        echo "  go get github.com/fastertools/ftl/sdk/go@v${{ needs.verify-tag.outputs.version }}"
        echo ""
        echo "Created tags:"
        echo "  - sdk-go-v${{ needs.verify-tag.outputs.version }} (release tracking)"
        echo "  - sdk/go/v${{ needs.verify-tag.outputs.version }} (Go module resolution)"
        echo ""
        echo "WARNING: Module may take a few minutes to appear in the Go module proxy"