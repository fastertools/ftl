name: Release Go SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-and-test:
    name: Validate and Test
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta1)"
          exit 1
        fi

    - name: Get current version
      id: get_version
      working-directory: sdk/go
      run: |
        current_version=$(grep -E '^// Version:' go.mod | awk '{print $3}' | sed 's/v//')
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: ${{ inputs.version }}"

    - name: Check version is newer
      run: |
        current="${{ steps.get_version.outputs.current_version }}"
        new="${{ inputs.version }}"
        
        # Simple version comparison (works for most cases)
        if [ "$(printf '%s\n' "$new" "$current" | sort -V | head -n1)" = "$new" ] && [ "$new" != "$current" ]; then
          echo "❌ New version ($new) must be higher than current version ($current)"
          exit 1
        fi

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.31.2/tinygo_0.31.2_amd64.deb
        sudo dpkg -i tinygo_0.31.2_amd64.deb

    - name: Run tests
      working-directory: sdk/go
      run: |
        go mod download
        go test -v ./...

    - name: Verify TinyGo compatibility
      working-directory: sdk/go
      run: make verify-tinygo

  release:
    name: Create Release
    needs: validate-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update version in go.mod
      working-directory: sdk/go
      run: |
        # Update the version comment in go.mod
        sed -i "s|// Version: v.*|// Version: v${{ inputs.version }}|" go.mod
        
        # Run go mod tidy to ensure everything is clean
        go mod tidy

    - name: Update CHANGELOG
      working-directory: sdk/go
      run: |
        # Get the current date
        date=$(date +%Y-%m-%d)
        
        # Create a new changelog entry
        cat > CHANGELOG.tmp.md << EOF
        # Changelog

        ## [v${{ inputs.version }}] - $date
        
        ### Added
        - (Add new features here)
        
        ### Changed
        - (Add changes here)
        
        ### Fixed
        - (Add bug fixes here)
        
        EOF
        
        # Append existing changelog content if it exists
        if [ -f CHANGELOG.md ]; then
          tail -n +2 CHANGELOG.md >> CHANGELOG.tmp.md
        fi
        
        mv CHANGELOG.tmp.md CHANGELOG.md

    - name: Commit version changes
      run: |
        git add sdk/go/go.mod sdk/go/go.sum sdk/go/CHANGELOG.md
        git commit -m "chore(sdk/go): bump version to v${{ inputs.version }}"

    - name: Create and push tag
      run: |
        # Create the tag with the sdk/go/ prefix
        tag_name="sdk/go/v${{ inputs.version }}"
        git tag -a "$tag_name" -m "Release Go SDK v${{ inputs.version }}"
        
        # Push the commit and tag
        git push origin HEAD:main
        git push origin "$tag_name"

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last SDK release
        last_tag=$(git tag -l "sdk/go/v*" --sort=-version:refname | head -n 2 | tail -n 1)
        
        if [ -z "$last_tag" ]; then
          echo "This is the first release of the Go SDK!" > release_notes.md
        else
          echo "## Changes since $last_tag" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commit messages
          git log --pretty=format:"- %s (%h)" "$last_tag"..HEAD -- sdk/go/ >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "go get github.com/fastertools/ftl-cli/sdk/go@v${{ inputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
        
        # Save for GitHub release
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        cat release_notes.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: sdk/go/v${{ inputs.version }}
        release_name: Go SDK v${{ inputs.version }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ inputs.prerelease }}

    - name: Verify module availability
      run: |
        echo "Waiting for Go module proxy to update..."
        sleep 30
        
        # Try to fetch the module
        cd /tmp
        go mod init test
        if go get github.com/fastertools/ftl-cli/sdk/go@v${{ inputs.version }}; then
          echo "✅ Module is available at version v${{ inputs.version }}"
        else
          echo "⚠️  Module may take a few minutes to appear in the proxy"
        fi