name: Release Go SDK

on:
  push:
    tags:
      - 'sdk-go-v*'

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          VERSION="${GITHUB_REF#refs/tags/sdk-go-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔢 Version: $VERSION"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify version matches README
        working-directory: sdk/go
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          README_VERSION=$(grep "^Version: " README.md | cut -d' ' -f2)
          if [ "$README_VERSION" != "$VERSION" ]; then
            echo "❌ Tag version ($VERSION) does not match README.md version ($README_VERSION)"
            exit 1
          fi
          echo "✅ Version matches README.md"

  validate-and-test:
    name: Validate and Test
    needs: verify-tag
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if ! [[ "${{ needs.verify-tag.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta1)"
          exit 1
        fi

    - name: Get current version
      id: get_version
      working-directory: sdk/go
      run: |
        # For Go modules, we'll check the latest git tag for this SDK
        current_version=$(git tag -l "sdk-go-v*" --sort=-version:refname | head -n 1 | sed 's|sdk-go-v||')
        if [ -z "$current_version" ]; then
          echo "No existing Go SDK tags found, assuming this is the first release"
          current_version="0.1.0"
        fi
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: ${{ needs.verify-tag.outputs.version }}"

    - name: Check version is newer
      run: |
        current="${{ steps.get_version.outputs.current_version }}"
        new="${{ needs.verify-tag.outputs.version }}"
        
        # Skip version comparison if this is the first release
        if [ "$current" = "0.1.0" ] && [ -z "$(git tag -l 'sdk-go-v*')" ]; then
          echo "✅ First release - no version comparison needed"
        else
          # Simple version comparison (works for most cases)
          if [ "$(printf '%s\n' "$new" "$current" | sort -V | head -n1)" = "$new" ] && [ "$new" != "$current" ]; then
            echo "❌ New version ($new) must be higher than current version ($current)"
            exit 1
          fi
          echo "✅ Version $new is newer than $current"
        fi

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.31.2/tinygo_0.31.2_amd64.deb
        sudo dpkg -i tinygo_0.31.2_amd64.deb

    - name: Run tests
      working-directory: sdk/go
      run: |
        go mod download
        go test -v ./...

    - name: Verify TinyGo compatibility
      working-directory: sdk/go
      run: make verify-tinygo

  release:
    name: Create Release
    needs: [verify-tag, validate-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Go module subdirectory tag
      run: |
        # Create Go module subdirectory tag for proper Go module versioning
        go_module_tag="sdk/go/v${{ needs.verify-tag.outputs.version }}"
        git tag -a "$go_module_tag" -m "Release Go SDK v${{ needs.verify-tag.outputs.version }}"
        git push origin "$go_module_tag"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "Go SDK v${{ needs.verify-tag.outputs.version }}"
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Go SDK v${{ needs.verify-tag.outputs.version }}
          
          ### Installation
          
          ```bash
          go get github.com/fastertools/ftl-cli/sdk/go@v${{ needs.verify-tag.outputs.version }}
          ```
          
          ### Links
          
          - [Go Packages](https://pkg.go.dev/github.com/fastertools/ftl-cli/sdk/go@v${{ needs.verify-tag.outputs.version }})
          - [Documentation](https://github.com/fastertools/ftl-cli/tree/main/sdk/go)

    - name: Verify module availability
      run: |
        echo "Waiting for Go module proxy to update..."
        sleep 30
        
        # Try to fetch the module
        cd /tmp
        go mod init test
        if go get github.com/fastertools/ftl-cli/sdk/go@v${{ needs.verify-tag.outputs.version }}; then
          echo "✅ Module is available at version v${{ needs.verify-tag.outputs.version }}"
        else
          echo "⚠️  Module may take a few minutes to appear in the proxy"
        fi
        
        echo ""
        echo "📦 Go module users can import with:"
        echo "  go get github.com/fastertools/ftl-cli/sdk/go@v${{ needs.verify-tag.outputs.version }}"
        echo ""
        echo "🏷️  Created tags:"
        echo "  - sdk-go-v${{ needs.verify-tag.outputs.version }} (release tracking)"
        echo "  - sdk/go/v${{ needs.verify-tag.outputs.version }} (Go module resolution)"

  update-templates:
    name: Update Templates PR
    needs: [verify-tag, release]
    if: needs.release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}
      
      - name: Setup Git
        uses: ./.github/actions/setup-git
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Create update branch
        run: |
          BRANCH="update-templates-sdk-go-v${{ needs.verify-tag.outputs.version }}"
          git checkout -b "$BRANCH"
          echo "UPDATE_BRANCH=$BRANCH" >> $GITHUB_ENV
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Update template versions
        run: |
          VERSION="${{ needs.verify-tag.outputs.version }}"
          
          # Update Go templates
          find templates -name "go.mod" -type f | while read -r file; do
            if grep -q 'github.com/fastertools/ftl-cli/sdk/go' "$file"; then
              # Update the require statement
              sed -i "s|github.com/fastertools/ftl-cli/sdk/go v[^ ]*|github.com/fastertools/ftl-cli/sdk/go v$VERSION|" "$file"
              echo "✅ Updated $file"
              
              # Run go mod tidy for the template
              dir=$(dirname "$file")
              cd "$dir"
              go mod tidy
              cd -
            fi
          done
      
      - name: Commit changes
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No template updates needed"
            exit 0
          fi
          git commit -m "chore: update templates to use Go SDK v${{ needs.verify-tag.outputs.version }}" \
            -m "Updates project templates to use the newly published SDK version." \
            -m "This is an automated update following the release of Go SDK v${{ needs.verify-tag.outputs.version }}."
      
      - name: Push update branch
        run: |
          git push origin "$UPDATE_BRANCH"
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT || github.token }}
        run: |
          VERSION="${{ needs.verify-tag.outputs.version }}"
          
          PR_BODY=$(cat <<EOF
          ## 📦 Update Templates to Go SDK v${VERSION}
          
          This PR updates project templates to use the newly published Go SDK version.
          
          ### Changes
          - Updated Go project templates to use SDK v${VERSION}
          - Ran \`go mod tidy\` for all affected templates
          
          ### Context
          This is an automated PR created after successfully publishing Go SDK v${VERSION}.
          
          ### Checklist
          - [x] SDK v${VERSION} tag has been created
          - [x] Go module subdirectory tag created for proper versioning
          - [x] Templates updated to new version
          - [x] \`go mod tidy\` run for all templates
          - [ ] CI tests pass with new version
          
          ### Links
          - [Go Packages](https://pkg.go.dev/github.com/fastertools/ftl-cli/sdk/go@v${VERSION})
          - [Release](https://github.com/fastertools/ftl-cli/releases/tag/sdk-go-v${VERSION})
          
          ---
          *🤖 This PR was automatically created by the release workflow*
          EOF
          )
          
          gh pr create \
            --title "chore: update templates to Go SDK v${VERSION}" \
            --body "$PR_BODY" \
            --base main \
            --head "$UPDATE_BRANCH" \
            --label "automated" \
            --label "dependencies"