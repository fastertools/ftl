name: Release CLI Binaries

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        type: string
      tag:
        description: 'Git tag for the release'
        required: true
        type: string

env:
  GO_VERSION: '1.23'
  CGO_ENABLED: '0'

jobs:
  build-matrix:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {runner: ubuntu-latest, goos: linux, goarch: amd64}
          - {runner: ubuntu-latest, goos: linux, goarch: arm64}
          - {runner: macos-14, goos: darwin, goarch: amd64}
          - {runner: macos-14, goos: darwin, goarch: arm64}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify version consistency
        run: |
          VERSION="${{ inputs.version }}"
          
          # Check that versions.json matches the release version
          JSON_VERSION=$(jq -r '.ftl' internal/scaffold/versions.json)
          if [[ "${JSON_VERSION}" != "${VERSION}" ]]; then
            echo "Version mismatch: versions.json has ${JSON_VERSION}, expected ${VERSION}"
            exit 1
          fi
          
          echo "Version ${VERSION} verified"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION="${{ inputs.version }}"
          OUTPUT="ftl-${GOOS}-${GOARCH}"
          
          # Build with version information embedded
          go build \
            -trimpath \
            -ldflags="-s -w -X github.com/fastertools/ftl/internal/version.Version=${VERSION} -X github.com/fastertools/ftl/internal/version.GitCommit=$(git rev-parse HEAD) -X github.com/fastertools/ftl/internal/version.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "${OUTPUT}" \
            ./cmd/ftl
          
          # Verify binary was created
          if [[ ! -f "${OUTPUT}" ]]; then
            echo "Failed to create binary: ${OUTPUT}"
            exit 1
          fi
          
          # Test binary runs (only on matching platform)
          if [[ "${RUNNER_OS}" == "Linux" && "${GOOS}" == "linux" ]] || [[ "${RUNNER_OS}" == "macOS" && "${GOOS}" == "darwin" ]]; then
            if [[ "${GOARCH}" == "${RUNNER_ARCH}" ]] || [[ "${GOARCH}" == "amd64" && "${RUNNER_ARCH}" == "X64" ]] || [[ "${GOARCH}" == "arm64" && "${RUNNER_ARCH}" == "ARM64" ]]; then
              ./"${OUTPUT}" version
            fi
          fi
          
          echo "Binary built: ${OUTPUT}"

      - name: Create release archive
        run: |
          BINARY="ftl-${{ matrix.goos }}-${{ matrix.goarch }}"
          ARCHIVE="ftl-${{ inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
          
          # Create a directory with the binary and docs
          mkdir -p "ftl-${{ inputs.version }}"
          cp "${BINARY}" "ftl-${{ inputs.version }}/ftl"
          cp README.md "ftl-${{ inputs.version }}/" || true
          cp LICENSE "ftl-${{ inputs.version }}/" || true
          
          # Create tarball
          tar -czf "${ARCHIVE}" "ftl-${{ inputs.version }}"
          
          # Generate checksum
          if [[ "${{ matrix.goos }}" == "darwin" ]]; then
            shasum -a 256 "${ARCHIVE}" > "${ARCHIVE}.sha256"
          else
            sha256sum "${ARCHIVE}" > "${ARCHIVE}.sha256"
          fi
          
          echo "Archive created: ${ARCHIVE}"
          cat "${ARCHIVE}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ftl-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ftl-${{ inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            ftl-${{ inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz.sha256
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          # Move all artifacts to release directory
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" \) -exec mv {} release/ \;
          
          # Create combined checksums file
          cd release
          cat *.sha256 > checksums.txt
          rm *.sha256
          
          # List all files for release
          ls -la
          echo "---"
          cat checksums.txt

      - name: Copy and update installation script
        run: |
          # Copy the existing install script
          cp install.sh release/install.sh
          
          # Update the script with the release version
          # The script will fetch the latest release by default,
          # but we can add a version comment
          sed -i "1a\\# Version: ${{ inputs.version }}" release/install.sh
          
          chmod +x release/install.sh

      - name: Create release notes
        run: |
          VERSION="${{ inputs.version }}"
          TAG="${{ inputs.tag }}"
          
          # Create release notes using printf to avoid heredoc issues
          {
            echo "## Installation"
            echo ""
            echo "### Quick Install (Linux/macOS)"
            echo ""
            echo '```bash'
            echo "curl -fsSL https://github.com/fastertools/ftl/releases/download/${TAG}/install.sh | bash"
            echo '```'
            echo ""
            echo "### Manual Installation"
            echo ""
            echo "1. Download the appropriate archive for your platform:"
            echo "   - Linux AMD64: \`ftl-${VERSION}-linux-amd64.tar.gz\`"
            echo "   - Linux ARM64: \`ftl-${VERSION}-linux-arm64.tar.gz\`"
            echo "   - macOS AMD64: \`ftl-${VERSION}-darwin-amd64.tar.gz\`"
            echo "   - macOS ARM64: \`ftl-${VERSION}-darwin-arm64.tar.gz\`"
            echo ""
            echo "2. Extract the archive:"
            echo '   ```bash'
            echo "   tar -xzf ftl-${VERSION}-<os>-<arch>.tar.gz"
            echo '   ```'
            echo ""
            echo "3. Move the binary to your PATH:"
            echo '   ```bash'
            echo "   sudo mv ftl-${VERSION}/ftl /usr/local/bin/ftl"
            echo '   ```'
            echo ""
            echo "4. Verify the installation:"
            echo '   ```bash'
            echo "   ftl version"
            echo '   ```'
            echo ""
            echo "### Verify Checksums"
            echo ""
            echo "Download the \`checksums.txt\` file and verify your download:"
            echo ""
            echo '```bash'
            echo "# Linux"
            echo "sha256sum -c checksums.txt --ignore-missing"
            echo ""
            echo "# macOS"
            echo "shasum -a 256 -c checksums.txt --ignore-missing"
            echo '```'
            echo "For more information, see the [documentation](https://github.com/fastertools/ftl)."
          } > release/notes.md

      - name: Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: FTL CLI v${{ inputs.version }}
          body_path: release/notes.md
          files: |
            release/*.tar.gz
            release/checksums.txt
            release/install.sh
          draft: false
          prerelease: false
          make_latest: true

  docker-release:
    name: Build and Push Docker Images
    needs: build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Download Linux binaries
        uses: actions/download-artifact@v4
        with:
          pattern: ftl-linux-*
          path: artifacts

      - name: Extract binaries
        run: |
          mkdir -p binaries
          for archive in artifacts/ftl-linux-*/ftl-*.tar.gz; do
            tar -xzf "${archive}" -C binaries --strip-components=1
          done
          
          # Rename to platform-specific names
          mv binaries/ftl binaries/ftl-linux-amd64 || true
          ls -la binaries/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM gcr.io/distroless/static-debian12:nonroot
          
          ARG TARGETARCH
          
          COPY ftl-linux-${TARGETARCH} /usr/local/bin/ftl
          
          USER nonroot
          ENTRYPOINT ["/usr/local/bin/ftl"]
          CMD ["--help"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: binaries
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/fastertools/ftl:${{ inputs.version }}
            ghcr.io/fastertools/ftl:latest
          labels: |
            org.opencontainers.image.title=FTL CLI
            org.opencontainers.image.description=Fast, secure, and portable MCP tools
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.source=https://github.com/fastertools/ftl
            org.opencontainers.image.licenses=Apache-2.0
