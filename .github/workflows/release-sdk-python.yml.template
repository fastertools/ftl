name: Release Python SDK

on:
  push:
    tags:
      - 'sdk-python-v*'

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          VERSION="${GITHUB_REF#refs/tags/sdk-python-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔢 Version: $VERSION"
      
      - name: Verify tag is on main branch
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "✅ Tag is on main branch"
          else
            echo "❌ Error: Tag is not on main branch"
            echo "This tag points to commit $TAG_COMMIT which is not on main"
            exit 1
          fi
      
      - name: Verify version matches pyproject.toml
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          # Extract version from pyproject.toml
          PACKAGE_VERSION=$(grep '^version' sdk/python/pyproject.toml | cut -d'"' -f2)
          if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
            echo "❌ Tag version ($VERSION) does not match pyproject.toml version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "✅ Version matches pyproject.toml"

  test:
    name: Test
    needs: verify-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          cd sdk/python
          pip install -e ".[dev]"
      
      - name: Run linting
        run: |
          cd sdk/python
          ruff check .
          mypy .
      
      - name: Run tests
        run: |
          cd sdk/python
          pytest
      
      - name: Build package
        if: matrix.python-version == env.PYTHON_VERSION
        run: |
          cd sdk/python
          pip install build
          python -m build

  publish:
    name: Publish to PyPI
    needs: [verify-tag, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build tools
        run: |
          pip install build twine
      
      - name: Build package
        run: |
          cd sdk/python
          python -m build
      
      - name: Check if version is already published
        id: check-published
        run: |
          VERSION="${{ needs.verify-tag.outputs.version }}"
          PACKAGE_NAME="ftl-sdk"
          
          # Check if version exists on PyPI
          if pip index versions $PACKAGE_NAME 2>/dev/null | grep -q "$VERSION"; then
            echo "⚠️  Version $VERSION already published on PyPI"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Version $VERSION not yet published"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to PyPI
        if: steps.check-published.outputs.skip != 'true'
        run: |
          cd sdk/python
          twine upload dist/*
          echo "✅ Published to PyPI"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Python SDK v${{ needs.verify-tag.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Python SDK v${{ needs.verify-tag.outputs.version }}
            
            ### Installation
            
            ```bash
            pip install ftl-sdk==${{ needs.verify-tag.outputs.version }}
            ```
            
            ### Usage
            
            ```python
            from ftl_sdk import create_tool, ToolResponse
            ```
            
            ### Links
            
            - [PyPI Package](https://pypi.org/project/ftl-sdk/)
            - [Documentation](https://github.com/fastertools/ftl-cli/tree/main/sdk/python)