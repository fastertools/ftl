name: Release Python SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      test_pypi:
        description: 'Publish to TestPyPI first?'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  id-token: write  # Required for trusted publishing

jobs:
  validate-and-test:
    name: Validate and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta1)"
          exit 1
        fi

    - name: Get current version
      id: get_version
      run: |
        current_version=$(grep -E '^version = ' pyproject.toml | awk -F'"' '{print $2}')
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: ${{ inputs.version }}"

    - name: Check version is newer
      run: |
        current="${{ steps.get_version.outputs.current_version }}"
        new="${{ inputs.version }}"
        
        # Simple version comparison (works for most cases)
        if [ "$(printf '%s\n' "$new" "$current" | sort -V | head -n1)" = "$new" ] && [ "$new" != "$current" ]; then
          echo "❌ New version ($new) must be higher than current version ($current)"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run tests
      run: tox -e py311

    - name: Run linting
      run: tox -e lint,type

  build:
    name: Build Distribution
    needs: validate-and-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Update version in pyproject.toml
      run: |
        # Update the version in pyproject.toml
        sed -i "s/^version = .*/version = \"${{ inputs.version }}\"/" pyproject.toml
        
        # Verify the change
        grep "^version = " pyproject.toml

    - name: Update CHANGELOG
      run: |
        # Get the current date
        date=$(date +%Y-%m-%d)
        
        # Create a new changelog entry
        cat > CHANGELOG.tmp.md << EOF
        # Changelog
        
        ## [v${{ inputs.version }}] - $date
        
        ### Added
        - (Add new features here)
        
        ### Changed
        - (Add changes here)
        
        ### Fixed
        - (Add bug fixes here)
        
        EOF
        
        # Append existing changelog content if it exists
        if [ -f CHANGELOG.md ]; then
          tail -n +2 CHANGELOG.md >> CHANGELOG.tmp.md
        fi
        
        mv CHANGELOG.tmp.md CHANGELOG.md

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      run: python -m build

    - name: Check distribution packages
      run: twine check dist/*

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: sdk/python/dist/

    - name: Commit version changes
      run: |
        cd ../..  # Go to repo root
        git add sdk/python/pyproject.toml sdk/python/CHANGELOG.md
        git commit -m "chore(sdk/python): bump version to v${{ inputs.version }}"
        git push origin HEAD:main

  publish-testpypi:
    name: Publish to TestPyPI
    if: inputs.test_pypi
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ftl-sdk
    permissions:
      id-token: write
    
    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

    - name: Verify TestPyPI installation
      run: |
        sleep 30  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ftl-sdk==${{ inputs.version }}

  publish-pypi:
    name: Publish to PyPI
    needs: [build, publish-testpypi]
    if: always() && needs.build.result == 'success' && (needs.publish-testpypi.result == 'success' || needs.publish-testpypi.result == 'skipped')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ftl-sdk
    permissions:
      id-token: write
    
    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main  # Get the latest commit with version bump

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last SDK release
        last_tag=$(git tag -l "sdk-python-v*" --sort=-version:refname | head -n 2 | tail -n 1)
        
        if [ -z "$last_tag" ]; then
          echo "This is the first release of the Python SDK!" > release_notes.md
        else
          echo "## Changes since $last_tag" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commit messages
          git log --pretty=format:"- %s (%h)" "$last_tag"..HEAD -- sdk/python/ >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### From PyPI" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "pip install ftl-sdk==${{ inputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### From TestPyPI (if available)" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ftl-sdk==${{ inputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
        
        # Save for GitHub release
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        cat release_notes.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create and push tag
      run: |
        tag_name="sdk-python-v${{ inputs.version }}"
        git tag -a "$tag_name" -m "Release Python SDK v${{ inputs.version }}"
        git push origin "$tag_name"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: sdk-python-v${{ inputs.version }}
        release_name: Python SDK v${{ inputs.version }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ inputs.prerelease }}

    - name: Verify PyPI installation
      run: |
        echo "Waiting for PyPI to update..."
        sleep 60
        
        # Try to install from PyPI
        pip install ftl-sdk==${{ inputs.version }}
        echo "✅ Package is available on PyPI!"