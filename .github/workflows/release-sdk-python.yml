name: Release Python SDK

on:
  push:
    tags:
      - 'sdk-python-v*'

permissions:
  contents: write
  pull-requests: write
  id-token: write  # Required for trusted publishing

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          VERSION="${GITHUB_REF#refs/tags/sdk-python-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔢 Version: $VERSION"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify version matches pyproject.toml
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          PACKAGE_VERSION=$(grep -E '^version = ' sdk/python/pyproject.toml | awk -F'"' '{print $2}')
          if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
            echo "❌ Tag version ($VERSION) does not match pyproject.toml version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "✅ Version matches pyproject.toml"

  validate-and-test:
    name: Validate and Test
    needs: verify-tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if ! [[ "${{ needs.verify-tag.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.0.0 or 1.0.0-beta1)"
          exit 1
        fi

    - name: Get current version
      id: get_version
      run: |
        current_version=$(grep -E '^version = ' pyproject.toml | awk -F'"' '{print $2}')
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: ${{ needs.verify-tag.outputs.version }}"

    - name: Check version is newer
      run: |
        current="${{ steps.get_version.outputs.current_version }}"
        new="${{ needs.verify-tag.outputs.version }}"
        
        # Simple version comparison (works for most cases)
        if [ "$(printf '%s\n' "$new" "$current" | sort -V | head -n1)" = "$new" ] && [ "$new" != "$current" ]; then
          echo "❌ New version ($new) must be higher than current version ($current)"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run tests
      run: tox -e py311

    - name: Run linting
      run: tox -e lint,type

  build:
    name: Build Distribution
    needs: [verify-tag, validate-and-test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      run: python -m build

    - name: Check distribution packages
      run: twine check dist/*

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: sdk/python/dist/

  publish-pypi:
    name: Publish to PyPI
    needs: [verify-tag, build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ftl-sdk
    permissions:
      id-token: write
    
    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    name: Create GitHub Release
    needs: [verify-tag, publish-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "Python SDK v${{ needs.verify-tag.outputs.version }}"
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Python SDK v${{ needs.verify-tag.outputs.version }}
          
          ### Installation
          
          ```bash
          pip install ftl-sdk==${{ needs.verify-tag.outputs.version }}
          ```
          
          ### Links
          
          - [PyPI Package](https://pypi.org/project/ftl-sdk/${{ needs.verify-tag.outputs.version }}/)
          - [Documentation](https://github.com/fastertools/ftl/tree/main/sdk/python)

    - name: Verify PyPI installation
      run: |
        echo "Waiting for PyPI to update..."
        sleep 60
        
        # Try to install from PyPI
        pip install ftl-sdk==${{ needs.verify-tag.outputs.version }}
        echo "✅ Package is available on PyPI!"

  update-templates:
    name: Update Templates PR
    needs: [verify-tag, publish-pypi]
    if: needs.publish-pypi.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
          fetch-depth: 0
      
      - name: Setup Git
        uses: ./.github/actions/setup-git
        with:
          token: ${{ secrets.PAT || github.token }}
      
      - name: Create update branch
        run: |
          BRANCH="update-templates-sdk-python-v${{ needs.verify-tag.outputs.version }}"
          git checkout -b "$BRANCH"
          echo "UPDATE_BRANCH=$BRANCH" >> $GITHUB_ENV
      
      - name: Update template versions
        run: |
          VERSION="${{ needs.verify-tag.outputs.version }}"
          
          # Update Python SDK version in versions.json
          jq --arg v "$VERSION" '.python = $v' internal/scaffold/versions.json > versions.tmp
          mv versions.tmp internal/scaffold/versions.json
          
          echo "✅ Updated Python SDK to v$VERSION in versions.json"
      
      - name: Commit changes
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No template updates needed"
            exit 0
          fi
          git commit -m "chore: update templates to use ftl-sdk v${{ needs.verify-tag.outputs.version }}" \
            -m "Updates project templates to use the newly published SDK version." \
            -m "This is an automated update following the release of ftl-sdk v${{ needs.verify-tag.outputs.version }}."
      
      - name: Push branch
        run: |
          git push origin "$UPDATE_BRANCH"
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT || github.token }}
        run: |
          VERSION="${{ needs.verify-tag.outputs.version }}"
          
          PR_BODY=$(cat <<EOF
          ## 📦 Update Templates to ftl-sdk v${VERSION}
          
          This PR updates project templates to use the newly published ftl-sdk version.
          
          ### Changes
          - Updated Python SDK version to v${VERSION} in internal/scaffold/versions.json
          
          ### Context
          This is an automated PR created after successfully publishing ftl-sdk v${VERSION} to PyPI.
          
          ### Checklist
          - [x] SDK v${VERSION} is published on PyPI
          - [x] Templates updated to new version
          - [ ] CI tests pass with new version
          
          ### Links
          - [PyPI Package](https://pypi.org/project/ftl-sdk/${VERSION}/)
          - [Release](https://github.com/fastertools/ftl/releases/tag/sdk-python-v${VERSION})
          
          ---
          *🤖 This PR was automatically created by the release workflow*
          EOF
          )
          
          gh pr create \
            --title "chore: update templates to ftl-sdk v${VERSION}" \
            --body "$PR_BODY" \
            --base main \
            --head "$UPDATE_BRANCH" \
            --label "automated" \
            --label "dependencies"