name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Go environment
  GO_VERSION: '1.24'
  
  # Rust environment  
  RUST_VERSION: '1.89'
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  
  # Caching versions (bump to invalidate)
  GO_CACHE_VERSION: v1
  RUST_CACHE_VERSION: v1

jobs:
  # ============================================================================
  # Go CLI Jobs
  # ============================================================================
  
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin v2.4.0
          
      - name: Run golangci-lint
        run: golangci-lint run --timeout 5m ./...
        
      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || \
            (echo "::error::go mod tidy produced changes. Run 'go mod tidy' and commit the changes." && exit 1)

  go-test:
    name: Go Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install Spin
        run: |
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          spin --version
          
      - name: Build ftl binary
        run: go build -o ftl ./cmd/ftl
          
      - name: Add ftl to PATH
        run: |
          mkdir -p $HOME/bin
          mv ftl $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: go
          name: go-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  go-build:
    name: Go Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -ldflags "-s -w" -o ftl-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/ftl
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ftl-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ftl-${{ matrix.goos }}-${{ matrix.goarch }}*

  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          
      - name: Run go mod audit
        run: |
          go list -json -m all | \
          go run golang.org/x/vuln/cmd/govulncheck@latest -json -

  # ============================================================================
  # Rust Components & SDK Jobs
  # ============================================================================
  
  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          targets: wasm32-wasip1
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-version: ${{ env.RUST_CACHE_VERSION }}
          
      - name: Add components and targets
        run: |
          rustup component add rustfmt clippy --toolchain ${{ env.RUST_VERSION }}
          rustup target add wasm32-wasip1
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run Clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  rust-test:
    name: Rust Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-wasip1
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-version: ${{ env.RUST_CACHE_VERSION }}
          
      - name: Add wasm32-wasip1 target
        run: rustup target add wasm32-wasip1
          
      - name: Run Rust SDK tests
        run: |
          # Run tests only for the SDK packages which have unit tests
          # Component tests need to be run with spin test separately
          cd sdk/rust && cargo test --all-features
          cd ../rust-macros && cargo test --all-features || true
          
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
        
      - name: Generate coverage
        run: |
          cargo llvm-cov --workspace --all-features \
            --lcov --output-path lcov.info || true
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  rust-build-wasm:
    name: Build WASM Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-wasip1
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-version: ${{ env.RUST_CACHE_VERSION }}
          
      - name: Add wasm32-wasip1 target
        run: rustup target add wasm32-wasip1
          
      - name: Build all WASM components
        run: |
          cargo build --workspace --release --target wasm32-wasip1
          
      - name: Check WASM file sizes
        run: |
          echo "WASM Component Sizes:"
          echo "====================="
          ls -lh target/wasm32-wasip1/release/*.wasm | awk '{print $5, $9}'
          
          # Fail if any WASM is over 10MB
          for wasm in target/wasm32-wasip1/release/*.wasm; do
            size=$(stat -c%s "$wasm" 2>/dev/null || stat -f%z "$wasm" 2>/dev/null)
            if [ "$size" -gt 10485760 ]; then
              echo "::error::$(basename $wasm) is over 10MB ($size bytes)"
              exit 1
            fi
          done
          
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-components
          path: target/wasm32-wasip1/release/*.wasm

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-wasip1
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-version: ${{ env.RUST_CACHE_VERSION }}
          
      - name: Add wasm32-wasip1 target
        run: rustup target add wasm32-wasip1
          
      - name: Install Spin
        run: |
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          spin --version
          
      - name: Install spin-test plugin
        run: |
          spin plugin install --yes -u https://github.com/spinframework/spin-test/releases/download/canary/spin-test.json
          
      - name: Run MCP Authorizer tests
        run: |
          cd components/mcp-authorizer
          spin test
          
      - name: Run MCP Gateway tests
        run: |
          cd components/mcp-gateway
          spin test

  # ============================================================================
  # Integration Tests
  # ============================================================================
  
  integration-test:
    name: Integration Tests
    needs: [go-build, rust-build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: ftl-linux-amd64
          
      - name: Download WASM components
        uses: actions/download-artifact@v4
        with:
          name: wasm-components
          path: components/
          
      - name: Make CLI executable
        run: chmod +x ftl-linux-amd64
        
      - name: Install Spin
        run: |
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          
      - name: Run integration tests
        run: |
          # Test CLI commands
          ./ftl-linux-amd64 --version
          ./ftl-linux-amd64 --help
          
          # Test building a sample project
          ./ftl-linux-amd64 init test-project --format yaml --no-interactive
          cd test-project
          ../ftl-linux-amd64 build
          
          # Test component functionality
          # Add more integration tests here

  # ============================================================================
  # SDK Tests (Python, TypeScript, etc.)
  # ============================================================================
  
  python-sdk-test:
    name: Python SDK Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('sdk/python/pyproject.toml') }}
          
      - name: Install dependencies
        run: |
          cd sdk/python
          pip install -e .[dev]
          
      - name: Run tests
        run: |
          cd sdk/python
          pytest --cov=ftl_sdk --cov-report=xml
          
      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          files: ./sdk/python/coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  typescript-sdk-test:
    name: TypeScript SDK Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: sdk/typescript/package-lock.json
          
      - name: Install dependencies
        run: |
          cd sdk/typescript
          npm ci
          
      - name: Build
        run: |
          cd sdk/typescript
          npm run build
          
      - name: Run tests
        run: |
          cd sdk/typescript
          npm test -- --coverage
          
      - name: Upload coverage
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          files: ./sdk/typescript/coverage/lcov.info
          flags: typescript
          name: typescript-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # Final Status Check
  # ============================================================================
  
  ci-status:
    name: CI Status
    if: always()
    needs: 
      - go-lint
      - go-test
      - go-build
      - go-security
      - rust-lint
      - rust-test
      - rust-build-wasm
      - component-tests
      - integration-test
      - python-sdk-test
      - typescript-sdk-test
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        run: |
          echo "CI Status Summary"
          echo "================="
          
          # Check each job status
          jobs=("go-lint" "go-test" "go-build" "go-security" "rust-lint" "rust-test" "rust-build-wasm" "component-tests" "integration-test" "python-sdk-test" "typescript-sdk-test")
          
          all_passed=true
          for job in "${jobs[@]}"; do
            status="${{ needs[job].result }}"
            if [ "$status" == "success" ]; then
              echo "✅ $job: passed"
            elif [ "$status" == "skipped" ]; then
              echo "⏭️  $job: skipped"
            else
              echo "❌ $job: $status"
              all_passed=false
            fi
          done
          
          if [ "$all_passed" == "true" ]; then
            echo ""
            echo "✅ All CI checks passed!"
          else
            echo ""
            echo "❌ Some CI checks failed"
            exit 1
          fi
