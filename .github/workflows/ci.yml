name: CI

on:
  workflow_call:  # Only run when called by ci-status.yml
    inputs:
      cli-changed:
        required: true
        type: string
      rust-sdk-changed:
        required: true
        type: string
      typescript-sdk-changed:
        required: true
        type: string
      core-crates-changed:
        required: true
        type: string
      components-changed:
        required: true
        type: string
      go-sdk-changed:
        required: true
        type: string
      python-sdk-changed:
        required: true
        type: string
      ci-changed:
        required: true
        type: string

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  lint-cli:
    name: Lint CLI
    if: inputs.cli-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with linting tools
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          cache-key: ci-lint
          install-system-deps: 'true'
      
      - name: Check formatting (CLI)
        run: |
          cargo fmt --package ftl-cli -- --check
          # Check formatting for all ftl-* crates
          for pkg in ftl-commands ftl-common ftl-language ftl-runtime; do
            cargo fmt --package $pkg -- --check
          done
      
      - name: Run clippy (CLI)
        run: |
          cargo clippy --package ftl-cli --all-targets --all-features -- -D warnings
          # Run clippy for all ftl-* crates
          for pkg in ftl-commands ftl-common ftl-language ftl-runtime; do
            cargo clippy --package $pkg --all-targets --all-features -- -D warnings
          done

  lint-rust-sdk:
    name: Lint Rust SDK
    if: inputs.rust-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with linting tools
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          cache-key: ci-lint-rust-sdk
      
      - name: Check formatting (SDK)
        run: |
          cargo fmt --package ftl-sdk --package ftl-sdk-macros -- --check
      
      - name: Run clippy (SDK)
        run: |
          cargo clippy --package ftl-sdk --package ftl-sdk-macros --all-targets --all-features -- -D warnings

  lint-typescript-sdk:
    name: Lint TypeScript SDK
    if: inputs.typescript-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
      
      - name: Install dependencies
        run: |
          cd sdk/typescript
          npm ci
      
      - name: Check formatting
        run: |
          cd sdk/typescript
          npm run format:check
      
      - name: Run linter
        run: |
          cd sdk/typescript
          npm run lint
      
      - name: Run type checking
        run: |
          cd sdk/typescript
          npm run typecheck
      
      - name: Run tests
        run: |
          cd sdk/typescript
          npm test

  lint-go-sdk:
    name: Lint Go SDK
    if: inputs.go-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('sdk/go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: Install golangci-lint
        working-directory: sdk/go
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      
      - name: Run go fmt
        working-directory: sdk/go
        run: |
          fmt_output=$(go fmt ./...)
          if [ -n "$fmt_output" ]; then
            echo "The following files need formatting:"
            echo "$fmt_output"
            exit 1
          fi
      
      - name: Run golangci-lint
        working-directory: sdk/go
        run: golangci-lint run --build-tags test

  test-go-sdk:
    name: Test Go SDK
    if: inputs.go-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('sdk/go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: Install dependencies
        working-directory: sdk/go
        run: go mod download
      
      - name: Run tests
        working-directory: sdk/go
        run: go test -v -race -coverprofile=coverage.out -tags test ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./sdk/go/coverage.out
          flags: go-sdk
          name: go-sdk-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Check for security vulnerabilities
        working-directory: sdk/go
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -tags test ./...

  test-python-sdk:
    name: Test Python SDK
    if: inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    defaults:
      run:
        working-directory: sdk/python
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('sdk/python/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      
      - name: Run tox tests
        run: tox
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./sdk/python/coverage.xml
          flags: python-sdk
          name: python-sdk-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  lint-python-sdk:
    name: Lint Python SDK
    if: inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('sdk/python/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Check formatting with black
        run: black --check src tests
      
      - name: Run ruff linter
        run: ruff check src tests
      
      - name: Run mypy type checker
        run: mypy src

  wasm-python-sdk:
    name: Test Python WebAssembly Compatibility
    if: inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install componentize-py and SDK
        run: |
          python -m pip install --upgrade pip
          pip install componentize-py spin-sdk
          pip install -e .
      
      - name: Test WASM build
        run: |
          # Create a test file that uses the SDK
          cat > test_wasm.py << 'EOF'
          from ftl_sdk import FTL
          
          ftl = FTL()
          
          @ftl.tool
          def test() -> str:
              """Test tool"""
              return "test"
          
          # Spin expects IncomingHandler, not Handler
          IncomingHandler = ftl.create_handler()
          EOF
          
          # Try to build with componentize-py, including SDK source path
          componentize-py -w spin-http componentize test_wasm -p . -p src -o test.wasm
          
          # Verify the WASM file was created
          test -f test.wasm || exit 1
          
          # Clean up
          rm test_wasm.py test.wasm

  security-python-sdk:
    name: Security Scan Python SDK
    if: inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: Install SDK dependencies
        run: pip install -e .
      
      - name: Run safety check
        run: safety check
        continue-on-error: true  # Don't fail the build for security warnings

  build-python-sdk:
    name: Build Python Distribution
    if: inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdk/python
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build distribution
        run: python -m build
      
      - name: Check distribution
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: sdk/python/dist/


  test-sdk:
    name: Test Rust SDK
    if: inputs.rust-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with test tools
        uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview
          cache-key: ci-test-sdk
      
      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
      
      - name: Run SDK tests with coverage
        run: |
          # Run SDK tests with coverage (excluding macros which are hard to test)
          cargo llvm-cov nextest --package ftl-sdk --all-features --profile ci --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'
          
          # Generate coverage report
          cargo llvm-cov report --package ftl-sdk --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'

  test-core:
    name: Test Core Crates
    if: inputs.core-crates-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with test tools
        uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview
          cache-key: ci-test-core
          install-system-deps: 'true'
      
      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
      
      - name: Run core crate tests with coverage
        run: |
          # Run only core crate tests (excluding ftl-cli and ftl-sdk-macros)
          cargo llvm-cov nextest --workspace --exclude ftl-cli --exclude ftl-sdk-macros --all-features --profile ci --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'
          
      - name: Check coverage threshold
        uses: ./.github/actions/check-coverage

  security:
    name: Security Audit
    if: inputs.cli-changed == 'true' || inputs.rust-sdk-changed == 'true' || inputs.core-crates-changed == 'true' || inputs.go-sdk-changed == 'true' || inputs.python-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: ci-security
          install-system-deps: 'true'
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      - name: Run security audit
        run: cargo audit

  wasm:
    name: WebAssembly Components
    if: inputs.components-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust for WASM
        uses: ./.github/actions/setup-rust
        with:
          toolchain: '1.86.0'
          targets: wasm32-wasip1
          cache-key: ci-wasm
          cache-targets: 'true'
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Build WebAssembly components
        run: |
          cargo build-wasm --release
          
      - name: Verify WebAssembly artifacts
        run: |
          # Verify the expected WASM files were built
          ls -la target/wasm32-wasip1/release/ftl_mcp_authorizer.wasm
          ls -la target/wasm32-wasip1/release/ftl_mcp_gateway.wasm
          echo "WebAssembly components built successfully"
