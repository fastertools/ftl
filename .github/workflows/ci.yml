name: CI

on:
  workflow_call:  # Only run when called by ci-status.yml
    inputs:
      cli-changed:
        required: true
        type: string
      rust-sdk-changed:
        required: true
        type: string
      typescript-sdk-changed:
        required: true
        type: string
      core-crates-changed:
        required: true
        type: string
      components-changed:
        required: true
        type: string
      ci-changed:
        required: true
        type: string

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  lint-cli:
    name: Lint CLI
    if: inputs.cli-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with linting tools
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          cache-key: ci-lint
          install-system-deps: 'true'
      
      - name: Check formatting (CLI)
        run: |
          cargo fmt --package ftl-cli -- --check
          # Check formatting for all ftl-* crates
          for pkg in ftl-commands ftl-common ftl-language ftl-runtime; do
            cargo fmt --package $pkg -- --check
          done
      
      - name: Run clippy (CLI)
        run: |
          cargo clippy --package ftl-cli --all-targets --all-features -- -D warnings
          # Run clippy for all ftl-* crates
          for pkg in ftl-commands ftl-common ftl-language ftl-runtime; do
            cargo clippy --package $pkg --all-targets --all-features -- -D warnings
          done

  lint-rust-sdk:
    name: Lint Rust SDK
    if: inputs.rust-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with linting tools
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          cache-key: ci-lint-rust-sdk
      
      - name: Check formatting (SDK)
        run: |
          cargo fmt --package ftl-sdk --package ftl-sdk-macros -- --check
      
      - name: Run clippy (SDK)
        run: |
          cargo clippy --package ftl-sdk --package ftl-sdk-macros --all-targets --all-features -- -D warnings

  lint-typescript-sdk:
    name: Lint TypeScript SDK
    if: inputs.typescript-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
      
      - name: Install dependencies
        run: |
          cd sdk/typescript
          npm ci
      
      - name: Check formatting
        run: |
          cd sdk/typescript
          npm run format:check
      
      - name: Run linter
        run: |
          cd sdk/typescript
          npm run lint
      
      - name: Run tests
        run: |
          cd sdk/typescript
          npm test


  test-sdk:
    name: Test Rust SDK
    if: inputs.rust-sdk-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with test tools
        uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview
          cache-key: ci-test-sdk
      
      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
      
      - name: Run SDK tests with coverage
        run: |
          # Run SDK tests with coverage (excluding macros which are hard to test)
          cargo llvm-cov nextest --package ftl-sdk --all-features --profile ci --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'
          
          # Generate coverage report
          cargo llvm-cov report --package ftl-sdk --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'

  test-core:
    name: Test Core Crates
    if: inputs.core-crates-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with test tools
        uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview
          cache-key: ci-test-core
          install-system-deps: 'true'
      
      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
      
      - name: Run core crate tests with coverage
        run: |
          # Run only core crate tests (excluding ftl-cli and ftl-sdk-macros)
          cargo llvm-cov nextest --workspace --exclude ftl-cli --exclude ftl-sdk-macros --all-features --profile ci --ignore-filename-regex '(test_helpers|api_client|deps)\.rs|sdk/rust-macros'
          
      - name: Check coverage threshold
        uses: ./.github/actions/check-coverage

  security:
    name: Security Audit
    if: inputs.cli-changed == 'true' || inputs.rust-sdk-changed == 'true' || inputs.core-crates-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: ci-security
          install-system-deps: 'true'
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      - name: Run security audit
        run: cargo audit

  wasm:
    name: WebAssembly Components
    if: inputs.components-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust for WASM
        uses: ./.github/actions/setup-rust
        with:
          toolchain: '1.86.0'
          targets: wasm32-wasip1
          cache-key: ci-wasm
          cache-targets: 'true'
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Build WebAssembly components
        run: |
          cargo build-wasm --release
          
      - name: Verify WebAssembly artifacts
        run: |
          # Verify the expected WASM files were built
          ls -la target/wasm32-wasip1/release/ftl_mcp_authorizer.wasm
          ls -la target/wasm32-wasip1/release/ftl_mcp_gateway.wasm
          echo "WebAssembly components built successfully"
