name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Allow this workflow to be called by other workflows
  workflow_call:
  # Trigger CI on release PRs created by release-please
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - '.release-please-manifest.json'
      - 'release-please-config.json'

env:
  # Go environment
  GO_VERSION: '1.24'
  
  # Rust environment  
  RUST_VERSION: '1.89'
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  
  # Caching versions (bump to invalidate)
  GO_CACHE_VERSION: v1
  RUST_CACHE_VERSION: v1

jobs:
  # ============================================================================
  # Go CLI Jobs
  # ============================================================================
  
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin v2.4.0
          
      - name: Run golangci-lint
        run: golangci-lint run --timeout 5m ./...
        
      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || \
            (echo "::error::go mod tidy produced changes. Run 'go mod tidy' and commit the changes." && exit 1)

  go-test:
    name: Go Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install Spin
        run: |
          # Install in a temp directory to avoid conflicts
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          cd -
          rm -rf $TEMP_DIR
          spin --version
          
      - name: Generate embedded files
        run: go generate ./...
        
      - name: Build ftl binary
        run: go build -o ftl ./cmd/ftl
          
      - name: Add ftl to PATH
        run: |
          mkdir -p $HOME/bin
          mv ftl $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        
  go-build:
    name: Go Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Generate embedded files
        run: go generate ./...
        
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -ldflags "-s -w" -o ftl-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/ftl
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ftl-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ftl-${{ matrix.goos }}-${{ matrix.goarch }}*

  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
          
      - name: Run go mod audit
        run: |
          go run golang.org/x/vuln/cmd/govulncheck@latest ./...

  # ============================================================================
  # Rust Components & SDK Jobs
  # ============================================================================
  
  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt,clippy
          targets: wasm32-wasip1
          cache-key: rust-lint
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run Clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  rust-test:
    name: Rust Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: rust-test
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Run Rust SDK tests
        run: |
          # Run tests only for the SDK packages which have unit tests
          # Component tests need to be run with spin test separately
          # Override the default target to run on native platform
          cd sdk/rust && cargo test --target x86_64-unknown-linux-gnu --all-features
          cd ../rust-macros && cargo test --target x86_64-unknown-linux-gnu --all-features || true
          
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
        
      - name: Generate coverage
        run: |
          cargo llvm-cov --workspace --all-features \
            --target x86_64-unknown-linux-gnu \
            --lcov --output-path lcov.info || true
            


  rust-build-wasm:
    name: Build WASM Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: rust-wasm
          cache-targets: 'true'
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Build all WASM components
        run: |
          cargo build --workspace --release --target wasm32-wasip1
          
      - name: Check WASM file sizes
        run: |
          echo "WASM Component Sizes:"
          echo "====================="
          ls -lh target/wasm32-wasip1/release/*.wasm | awk '{print $5, $9}'
          
          # Fail if any WASM is over 10MB
          for wasm in target/wasm32-wasip1/release/*.wasm; do
            size=$(stat -c%s "$wasm" 2>/dev/null || stat -f%z "$wasm" 2>/dev/null)
            if [ "$size" -gt 10485760 ]; then
              echo "::error::$(basename $wasm) is over 10MB ($size bytes)"
              exit 1
            fi
          done
          
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-components
          path: target/wasm32-wasip1/release/*.wasm

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: component-tests
          cache-targets: 'true'
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Install Spin
        run: |
          # Install in a temp directory to avoid conflicts
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          cd -
          rm -rf $TEMP_DIR
          spin --version
          
      - name: Install spin-test plugin
        run: |
          spin plugin install --yes -u https://github.com/spinframework/spin-test/releases/download/canary/spin-test.json
          
      - name: Run MCP Authorizer tests
        run: |
          cd components/mcp-authorizer
          cargo build --target wasm32-wasip1 --release --target-dir ./target
          spin test
          
      - name: Run MCP Gateway tests
        run: |
          cd components/mcp-gateway
          cargo build --target wasm32-wasip1 --release --target-dir ./target
          spin test

  # ============================================================================
  # Integration Tests
  # ============================================================================
  
  integration-test:
    name: Integration Tests
    needs: [go-build, rust-build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: ftl-linux-amd64
          
      - name: Download WASM components
        uses: actions/download-artifact@v4
        with:
          name: wasm-components
          path: components/
          
      - name: Make CLI executable
        run: chmod +x ftl-linux-amd64
        
      - name: Install Spin
        run: |
          # Install in a temp directory to avoid conflicts
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
          sudo mv spin /usr/local/bin/
          cd -
          rm -rf $TEMP_DIR
          
      - name: Run integration tests
        run: |
          # Test CLI commands
          ./ftl-linux-amd64 --version
          ./ftl-linux-amd64 --help
          
          # Test building a sample project
          ./ftl-linux-amd64 init test-project --language yaml --no-interactive
          cd test-project
          ../ftl-linux-amd64 build
          
          # Test component functionality
          # Add more integration tests here

  # ============================================================================
  # SDK Tests (Python, TypeScript, etc.)
  # ============================================================================
  
  python-sdk-test:
    name: Python SDK Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('sdk/python/pyproject.toml') }}
          
      - name: Install dependencies
        run: |
          cd sdk/python
          pip install -e .[dev]
          
      - name: Run tests
        run: |
          cd sdk/python
          pytest --cov=ftl_sdk --cov-report=xml

  typescript-sdk-test:
    name: TypeScript SDK Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: sdk/typescript/package-lock.json
          
      - name: Install dependencies
        run: |
          cd sdk/typescript
          npm ci
          
      - name: Build
        run: |
          cd sdk/typescript
          npm run build
          
      - name: Run tests
        run: |
          cd sdk/typescript
          npm test -- --coverage
  # ============================================================================
  # Final Status Check
  # ============================================================================
  
  ci-status:
    name: CI Status
    if: always()
    needs: 
      - go-lint
      - go-test
      - go-build
      - go-security
      - rust-lint
      - rust-test
      - rust-build-wasm
      - component-tests
      - integration-test
      - python-sdk-test
      - typescript-sdk-test
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        run: |
          echo "CI Status Summary"
          echo "================="
          
          all_passed=true
          
          # Check go-lint
          if [ "${{ needs.go-lint.result }}" == "success" ]; then
            echo "✅ go-lint: passed"
          else
            echo "❌ go-lint: ${{ needs.go-lint.result }}"
            all_passed=false
          fi
          
          # Check go-test
          if [ "${{ needs.go-test.result }}" == "success" ]; then
            echo "✅ go-test: passed"
          else
            echo "❌ go-test: ${{ needs.go-test.result }}"
            all_passed=false
          fi
          
          # Check go-build
          if [ "${{ needs.go-build.result }}" == "success" ]; then
            echo "✅ go-build: passed"
          else
            echo "❌ go-build: ${{ needs.go-build.result }}"
            all_passed=false
          fi
          
          # Check go-security
          if [ "${{ needs.go-security.result }}" == "success" ]; then
            echo "✅ go-security: passed"
          else
            echo "❌ go-security: ${{ needs.go-security.result }}"
            all_passed=false
          fi
          
          # Check rust-lint
          if [ "${{ needs.rust-lint.result }}" == "success" ]; then
            echo "✅ rust-lint: passed"
          else
            echo "❌ rust-lint: ${{ needs.rust-lint.result }}"
            all_passed=false
          fi
          
          # Check rust-test
          if [ "${{ needs.rust-test.result }}" == "success" ]; then
            echo "✅ rust-test: passed"
          else
            echo "❌ rust-test: ${{ needs.rust-test.result }}"
            all_passed=false
          fi
          
          # Check rust-build-wasm
          if [ "${{ needs.rust-build-wasm.result }}" == "success" ]; then
            echo "✅ rust-build-wasm: passed"
          else
            echo "❌ rust-build-wasm: ${{ needs.rust-build-wasm.result }}"
            all_passed=false
          fi
          
          # Check component-tests
          if [ "${{ needs.component-tests.result }}" == "success" ]; then
            echo "✅ component-tests: passed"
          else
            echo "❌ component-tests: ${{ needs.component-tests.result }}"
            all_passed=false
          fi
          
          # Check integration-test
          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "✅ integration-test: passed"
          else
            echo "❌ integration-test: ${{ needs.integration-test.result }}"
            all_passed=false
          fi
          
          # Check python-sdk-test
          if [ "${{ needs.python-sdk-test.result }}" == "success" ]; then
            echo "✅ python-sdk-test: passed"
          else
            echo "❌ python-sdk-test: ${{ needs.python-sdk-test.result }}"
            all_passed=false
          fi
          
          # Check typescript-sdk-test
          if [ "${{ needs.typescript-sdk-test.result }}" == "success" ]; then
            echo "✅ typescript-sdk-test: passed"
          else
            echo "❌ typescript-sdk-test: ${{ needs.typescript-sdk-test.result }}"
            all_passed=false
          fi
          
          if [ "$all_passed" == "true" ]; then
            echo ""
            echo "✅ All CI checks passed!"
          else
            echo ""
            echo "❌ Some CI checks failed"
            exit 1
          fi
