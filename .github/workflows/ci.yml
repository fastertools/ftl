name: CI

on:
  workflow_call:  # Only run when called by ci-status.yml
    inputs:
      cli-changed:
        required: true
        type: string
      rust-sdk-changed:
        required: true
        type: string
      core-crates-changed:
        required: true
        type: string
      components-changed:
        required: true
        type: string
      ci-changed:
        required: true
        type: string

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    if: inputs.cli-changed == 'true' || inputs.rust-sdk-changed == 'true' || inputs.core-crates-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # Use a shared cache key for better reuse across branches
          shared-key: "ci-lint"
          # Only save caches from the main branch to avoid PR pollution
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-and-coverage:
    name: Test & Coverage
    if: inputs.cli-changed == 'true' || inputs.rust-sdk-changed == 'true' || inputs.core-crates-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev
      
      - name: Install Rust with llvm-tools
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-test"
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      - name: Install cargo-llvm-cov and nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov,nextest
      
      - name: Run tests with coverage
        run: |
          # Run tests with coverage in one command
          cargo llvm-cov nextest --all-features --profile ci
          
          # Generate coverage report and extract percentage
          COVERAGE=$(cargo llvm-cov report | tail -1 | awk '{print $4}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          
          # Fail if coverage drops below 80%
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Coverage ${COVERAGE}% is below required 80%"
            exit 1
          else
            echo "::notice::Coverage ${COVERAGE}% meets the 80% requirement"
          fi

  security:
    name: Security Audit
    if: inputs.cli-changed == 'true' || inputs.rust-sdk-changed == 'true' || inputs.core-crates-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-security"
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      - name: Run security audit
        run: cargo audit

  wasm:
    name: WebAssembly Components
    if: inputs.components-changed == 'true' || inputs.ci-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86.0
          target: wasm32-wasip1
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-wasm"
          cache-targets: true
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Build WebAssembly components
        run: |
          cargo build-wasm --release
          
      - name: Verify WebAssembly artifacts
        run: |
          # Verify the expected WASM files were built
          ls -la target/wasm32-wasip1/release/ftl_mcp_authorizer.wasm
          ls -la target/wasm32-wasip1/release/ftl_mcp_gateway.wasm
          echo "WebAssembly components built successfully"
