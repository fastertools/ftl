name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Verify tag is on main branch
        run: |
          # Get the commit SHA that the tag points to
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          
          # Check if this commit exists on the main branch
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "✅ Tag is on main branch"
          else
            echo "❌ Error: Tag is not on main branch"
            echo "This tag points to commit $TAG_COMMIT which is not on main"
            exit 1
          fi

  build-binaries:
    name: Build Binaries
    needs: verify-tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: ftl
            asset_name: ftl-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: ftl
            asset_name: ftl-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: ftl
            asset_name: ftl-aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Validate version matches Cargo.toml
        run: |
          # Check the version in cli/Cargo.toml (the main CLI package)
          CLI_VERSION=$(grep '^version' cli/Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$CLI_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Error: Tag version (${{ steps.version.outputs.VERSION }}) does not match CLI version ($CLI_VERSION)"
            exit 1
          fi
        shell: bash
      
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ftl
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./target/${{ matrix.target }}/release/${{ matrix.binary }}
          if-no-files-found: error
  
  create-release:
    name: Create Release
    needs: [verify-tag, build-binaries]
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in binaries/*/; do
            asset_name=$(basename "$dir")
            if [ -f "${dir}ftl" ]; then
              cp "${dir}ftl" "release-assets/${asset_name}"
            elif [ -f "${dir}ftl.exe" ]; then
              cp "${dir}ftl.exe" "release-assets/${asset_name}"
            fi
          done
          ls -la release-assets/
        shell: bash
      
      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-assets/*

  publish-cli:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_created
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish ftl-cli
        run: |
          # Check if this version is already published
          # Get version from cli/Cargo.toml
          CLI_VERSION=$(grep '^version' cli/Cargo.toml | head -1 | cut -d'"' -f2)
          if cargo search ftl-cli --limit 1 | grep -q "^ftl-cli = \"$CLI_VERSION\""; then
            echo "ftl-cli version $CLI_VERSION already published, skipping"
          else
            cd cli && cargo publish
          fi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-components:
    name: Publish WebAssembly Components
    needs: create-release
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_created
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
      
      - name: Install cargo-component
        run: cargo install cargo-component --locked
      
      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.11.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and publish mcp-authorizer
        run: |
          cd components/mcp-authorizer
          cargo component build --target wasm32-wasip1 --release
          wkg oci push ghcr.io/fastertools/mcp-authorizer:${{ steps.version.outputs.VERSION }} target/wasm32-wasip1/release/mcp_authorizer.wasm
          wkg oci push ghcr.io/fastertools/mcp-authorizer:latest target/wasm32-wasip1/release/mcp_authorizer.wasm
      
      - name: Build and publish mcp-gateway
        run: |
          cd components/mcp-gateway
          cargo component build --target wasm32-wasip1 --release
          wkg oci push ghcr.io/fastertools/mcp-gateway:${{ steps.version.outputs.VERSION }} target/wasm32-wasip1/release/ftl_mcp_gateway.wasm
          wkg oci push ghcr.io/fastertools/mcp-gateway:latest target/wasm32-wasip1/release/ftl_mcp_gateway.wasm

  publish-sdks:
    name: Publish SDKs to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_created
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish ftl-sdk-macros
        run: |
          cd sdk/rust-macros
          MACROS_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if cargo search ftl-sdk-macros --limit 1 | grep -q "^ftl-sdk-macros = \"$MACROS_VERSION\""; then
            echo "ftl-sdk-macros version $MACROS_VERSION already published, skipping"
          else
            cargo publish
          fi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Wait for crates.io to index ftl-sdk-macros
        run: sleep 30
      
      - name: Publish ftl-sdk
        run: |
          cd sdk/rust
          SDK_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if cargo search ftl-sdk --limit 1 | grep -q "^ftl-sdk = \"$SDK_VERSION\""; then
            echo "ftl-sdk version $SDK_VERSION already published, skipping"
          else
            cargo publish
          fi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
