name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: ftl
            asset_name: ftl-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: ftl
            asset_name: ftl-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: ftl
            asset_name: ftl-aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Validate version matches Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$CARGO_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Error: Tag version (${{ steps.version.outputs.VERSION }}) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
        shell: bash
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ftl
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./target/${{ matrix.target }}/release/${{ matrix.binary }}
          if-no-files-found: error
  
  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in binaries/*/; do
            if [ -f "${dir}ftl" ]; then
              asset_name=$(basename "$dir")
              cp "${dir}ftl" "release-assets/${asset_name}"
            fi
          done
          ls -la release-assets/
        shell: bash
      
      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-assets/*

  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_created
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Check if ftl-core already published
        id: check-core
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if cargo search ftl-core --limit 1 | grep -q "ftl-core = \"$VERSION\""; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "ftl-core version $VERSION already published"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish ftl-core
        if: steps.check-core.outputs.skip != 'true'
        run: |
          cd crates/ftl-core
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Wait for crates.io to index
        if: steps.check-core.outputs.skip != 'true'
        run: |
          echo "Waiting for ftl-core to be indexed on crates.io..."
          for i in {1..12}; do
            sleep 10
            VERSION=$(grep '^version' ../Cargo.toml | head -1 | cut -d'"' -f2)
            if cargo search ftl-core --limit 1 | grep -q "ftl-core = \"$VERSION\""; then
              echo "ftl-core is now available on crates.io"
              break
            fi
            echo "Attempt $i/12: ftl-core not yet indexed..."
          done
      
      - name: Check if ftl-cli already published
        id: check-cli
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if cargo search ftl-cli --limit 1 | grep -q "ftl-cli = \"$VERSION\""; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "ftl-cli version $VERSION already published"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish ftl-cli
        if: steps.check-cli.outputs.skip != 'true'
        run: |
          cd crates/ftl-cli
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}