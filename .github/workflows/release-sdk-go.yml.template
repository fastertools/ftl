name: Release Go SDK

on:
  push:
    tags:
      - 'sdk-go-v*'

env:
  GO_VERSION: '1.21'

permissions:
  contents: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          VERSION="${GITHUB_REF#refs/tags/sdk-go-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üî¢ Version: $VERSION"
      
      - name: Verify tag is on main branch
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "‚úÖ Tag is on main branch"
          else
            echo "‚ùå Error: Tag is not on main branch"
            echo "This tag points to commit $TAG_COMMIT which is not on main"
            exit 1
          fi
      
      - name: Verify module path
        run: |
          # Ensure go.mod exists and has correct module path
          if [ ! -f "sdk/go/go.mod" ]; then
            echo "‚ùå Error: sdk/go/go.mod not found"
            exit 1
          fi
          
          MODULE_PATH=$(grep '^module' sdk/go/go.mod | awk '{print $2}')
          EXPECTED="github.com/fastertools/ftl-cli/sdk/go"
          if [ "$MODULE_PATH" != "$EXPECTED" ]; then
            echo "‚ùå Error: Module path is $MODULE_PATH, expected $EXPECTED"
            exit 1
          fi
          echo "‚úÖ Module path verified"

  test:
    name: Test
    needs: verify-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Install dependencies
        run: |
          cd sdk/go
          go mod download
      
      - name: Run linting
        run: |
          cd sdk/go
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run
      
      - name: Run tests
        run: |
          cd sdk/go
          go test -v -race -coverprofile=coverage.out ./...
      
      - name: Check coverage
        if: matrix.go-version == env.GO_VERSION
        run: |
          cd sdk/go
          go tool cover -func=coverage.out

  publish:
    name: Publish Go Module
    needs: [verify-tag, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Go SDK v${{ needs.verify-tag.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Go SDK v${{ needs.verify-tag.outputs.version }}
            
            ### Installation
            
            ```bash
            go get github.com/fastertools/ftl-cli/sdk/go@v${{ needs.verify-tag.outputs.version }}
            ```
            
            ### Usage
            
            ```go
            import "github.com/fastertools/ftl-cli/sdk/go/ftl"
            
            // Create a tool
            tool := ftl.NewTool("my_tool", handler)
            ```
            
            ### Links
            
            - [Go Package](https://pkg.go.dev/github.com/fastertools/ftl-cli/sdk/go)
            - [Documentation](https://github.com/fastertools/ftl-cli/tree/main/sdk/go)
      
      - name: Notify Go proxy
        run: |
          # Force Go proxy to update
          curl -s "https://proxy.golang.org/github.com/fastertools/ftl-cli/sdk/go/@v/v${{ needs.verify-tag.outputs.version }}.info" || true
          echo "‚úÖ Go module published (via git tag)"