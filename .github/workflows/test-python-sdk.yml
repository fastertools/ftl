name: Test Python SDK

on:
  push:
    branches: [ main ]
    paths:
      - 'sdk/python/**'
      - '.github/workflows/test-python-sdk.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'sdk/python/**'
      - '.github/workflows/test-python-sdk.yml'

defaults:
  run:
    working-directory: sdk/python

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('sdk/python/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install tox
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Run tox tests
      run: tox

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./sdk/python/coverage.xml
        flags: python-sdk
        name: python-sdk-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('sdk/python/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check formatting with black
      run: black --check src tests

    - name: Run ruff linter
      run: ruff check src tests

    - name: Run mypy type checker
      run: mypy src

  wasm-compatibility:
    name: Test WebAssembly Compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install componentize-py
      run: |
        python -m pip install --upgrade pip
        pip install componentize-py spin-sdk

    - name: Test WASM build
      run: |
        # Create a test file that uses the SDK
        cat > test_wasm.py << 'EOF'
        from ftl_sdk import create_tools, ToolResponse
        
        Handler = create_tools({
            "test": {
                "description": "Test tool",
                "inputSchema": {"type": "object"},
                "handler": lambda input: ToolResponse.text("test")
            }
        })
        EOF
        
        # Try to build with componentize-py
        componentize-py -w spin-http componentize test_wasm -o test.wasm
        
        # Verify the WASM file was created
        test -f test.wasm || exit 1
        
        # Clean up
        rm test_wasm.py test.wasm

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Install SDK dependencies
      run: pip install -e .

    - name: Run safety check
      run: safety check
      continue-on-error: true  # Don't fail the build for security warnings

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: sdk/python/dist/