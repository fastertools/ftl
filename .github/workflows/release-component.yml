name: Release Component

on:
  push:
    tags:
      - 'component-*-v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.parse.outputs.component }}
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          # Extract component name and version from tag
          # Format: component-{name}-v{version}
          TAG="${GITHUB_REF#refs/tags/}"
          if [[ ! "$TAG" =~ ^component-([a-z-]+)-v(.+)$ ]]; then
            echo "‚ùå Invalid tag format: $TAG"
            echo "Expected format: component-{name}-v{version}"
            exit 1
          fi
          COMPONENT="${BASH_REMATCH[1]}"
          VERSION="${BASH_REMATCH[2]}"
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Component: $COMPONENT"
          echo "üî¢ Version: $VERSION"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify component exists
        run: |
          COMPONENT="${{ steps.parse.outputs.component }}"
          if [ ! -d "components/$COMPONENT" ]; then
            echo "‚ùå Component directory not found: components/$COMPONENT"
            exit 1
          fi
          echo "‚úÖ Component directory exists"
      
      - name: Verify version matches Cargo.toml
        run: |
          COMPONENT="${{ steps.parse.outputs.component }}"
          VERSION="${{ steps.parse.outputs.version }}"
          CARGO_VERSION=$(grep '^version' "components/$COMPONENT/Cargo.toml" | head -1 | cut -d'"' -f2)
          if [ "$CARGO_VERSION" != "$VERSION" ]; then
            echo "‚ùå Tag version ($VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version matches Cargo.toml"

  build-and-publish:
    name: Build and Publish Component
    needs: verify-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust for WASM
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: release-component-${{ matrix.component }}
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.11.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build component
        run: |
          cd "components/${{ needs.verify-tag.outputs.component }}"
          cargo component build --target wasm32-wasip1 --release
      
      - name: Determine WASM file name
        id: wasm
        run: |
          COMPONENT="${{ needs.verify-tag.outputs.component }}"
          # Components use ftl_ prefix and underscores in their library names
          # Replace hyphens with underscores and add ftl_ prefix
          WASM_NAME="ftl_${COMPONENT//-/_}.wasm"
          echo "name=$WASM_NAME" >> $GITHUB_OUTPUT
      
      - name: Publish to ghcr.io
        run: |
          COMPONENT="${{ needs.verify-tag.outputs.component }}"
          VERSION="${{ needs.verify-tag.outputs.version }}"
          WASM_FILE="../../target/wasm32-wasip1/release/${{ steps.wasm.outputs.name }}"
          
          cd "components/$COMPONENT"
          
          # Debug: Check if WASM file exists
          if [ ! -f "$WASM_FILE" ]; then
            echo "‚ùå WASM file not found at: $WASM_FILE"
            echo "Looking for files in release directory:"
            ls -la ../../target/wasm32-wasip1/release/
            exit 1
          fi
          
          # Publish versioned and latest tags
          wkg oci push "ghcr.io/fastertools/$COMPONENT:$VERSION" "$WASM_FILE"
          wkg oci push "ghcr.io/fastertools/$COMPONENT:latest" "$WASM_FILE"
          
          echo "‚úÖ Published $COMPONENT v$VERSION to ghcr.io"
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ needs.verify-tag.outputs.component }} v${{ needs.verify-tag.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Component: ${{ needs.verify-tag.outputs.component }}
            
            ### Installation
            
            Add to your `spin.toml`:
            ```toml
            [component.${{ needs.verify-tag.outputs.component }}]
            source = { registry = "ghcr.io", package = "fastertools:${{ needs.verify-tag.outputs.component }}", version = "${{ needs.verify-tag.outputs.version }}" }
            ```
            
            Or use the latest version:
            ```toml
            [component.${{ needs.verify-tag.outputs.component }}]
            source = { registry = "ghcr.io", package = "fastertools:${{ needs.verify-tag.outputs.component }}", version = "latest" }
            ```