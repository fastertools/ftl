name: Release

on:
  push:
    tags:
      - 'cli-v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag

  build-binaries:
    name: Build Binaries
    needs: verify-tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: ftl
            asset_name: ftl-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: ftl
            asset_name: ftl-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: ftl
            asset_name: ftl-aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Validate version matches Cargo.toml
        run: |
          # Check the version in cli/Cargo.toml (the main CLI package)
          CLI_VERSION=$(grep '^version' cli/Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$CLI_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Error: Tag version (${{ steps.version.outputs.VERSION }}) does not match CLI version ($CLI_VERSION)"
            exit 1
          fi
        shell: bash
      
      - name: Setup Rust for target
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
          cache-key: release-${{ matrix.target }}
          install-system-deps: 'true'

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ftl
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./target/${{ matrix.target }}/release/${{ matrix.binary }}
          if-no-files-found: error
  
  create-release:
    name: Create Release
    needs: [verify-tag, build-binaries]
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in binaries/*/; do
            asset_name=$(basename "$dir")
            if [ -f "${dir}ftl" ]; then
              cp "${dir}ftl" "release-assets/${asset_name}"
            elif [ -f "${dir}ftl.exe" ]; then
              cp "${dir}ftl.exe" "release-assets/${asset_name}"
            fi
          done
          ls -la release-assets/
        shell: bash
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-assets/*
          body: |
            ## Installation
            
            ### Quick Install (Linux/macOS)
            
            ```bash
            curl -fsSL https://raw.githubusercontent.com/fastertools/ftl-cli/cli-v${{ steps.version.outputs.VERSION }}/install.sh | bash
            sudo mv ./ftl /usr/local/bin/ftl
            ```
            
            ### Manual Installation
            
            Download the appropriate binary for your platform from the assets below, then:
            
            ```bash
            chmod +x ftl-*
            sudo mv ftl-* /usr/local/bin/ftl
            ```
            
            ### Build from Source
            
            ```bash
            cargo install --git https://github.com/fastertools/ftl-cli
            ```
            
            ### Verify Installation
            
            ```bash
            ftl --version
            ```
            
            ---
            
            **Full Changelog**: https://github.com/fastertools/ftl-cli/compare/cli-v${{ steps.version.outputs.VERSION }}...cli-v${{ steps.version.outputs.VERSION }}

