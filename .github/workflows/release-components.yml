name: Release Components

on:
  push:
    tags:
      - 'components-v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          # Extract version from tag
          # Format: components-v{version}
          TAG="${GITHUB_REF#refs/tags/}"
          if [[ ! "$TAG" =~ ^components-v(.+)$ ]]; then
            echo "‚ùå Invalid tag format: $TAG"
            echo "Expected format: components-v{version}"
            exit 1
          fi
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üî¢ Version: $VERSION"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify workspace version matches tag
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          # Check workspace version
          WORKSPACE_VERSION=$(grep '^\s*version' components/Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$WORKSPACE_VERSION" != "$VERSION" ]; then
            echo "‚ùå Tag version ($VERSION) does not match workspace version ($WORKSPACE_VERSION)"
            exit 1
          fi
          echo "‚úÖ Workspace version matches tag: $VERSION"

  build-and-publish:
    name: Build and Publish ${{ matrix.component }}
    needs: verify-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [mcp-gateway, mcp-authorizer]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust for WASM
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: release-components-${{ matrix.component }}-v189
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.11.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build component
        run: |
          cd "components/${{ matrix.component }}"
          cargo component build --target wasm32-wasip1 --release
      
      - name: Determine WASM file name
        id: wasm
        run: |
          COMPONENT="${{ matrix.component }}"
          # Replace hyphens with underscores (Cargo uses underscores in output names)
          WASM_NAME="${COMPONENT//-/_}.wasm"
          echo "name=$WASM_NAME" >> $GITHUB_OUTPUT
      
      - name: Publish to ghcr.io
        run: |
          COMPONENT="${{ matrix.component }}"
          VERSION="${{ needs.verify-tag.outputs.version }}"
          WASM_FILE="../target/wasm32-wasip1/release/${{ steps.wasm.outputs.name }}"
          
          cd "components/$COMPONENT"
          
          # Debug: Check if WASM file exists
          if [ ! -f "$WASM_FILE" ]; then
            echo "‚ùå WASM file not found at: $WASM_FILE"
            echo "Looking for files in release directory:"
            ls -la ../target/wasm32-wasip1/release/
            exit 1
          fi
          
          # Publish versioned and latest tags
          wkg oci push "ghcr.io/fastertools/$COMPONENT:$VERSION" "$WASM_FILE"
          wkg oci push "ghcr.io/fastertools/$COMPONENT:latest" "$WASM_FILE"
          
          echo "‚úÖ Published $COMPONENT v$VERSION to ghcr.io"
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-wasm
          path: components/target/wasm32-wasip1/release/${{ steps.wasm.outputs.name }}

  create-release:
    name: Create Unified Release
    needs: [verify-tag, build-and-publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "FTL Components v${{ needs.verify-tag.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.wasm
          body: |
            ## FTL Components v${{ needs.verify-tag.outputs.version }}
            
            This release includes both FTL components with unified versioning:
            - **mcp-gateway** - MCP gateway component
            - **mcp-authorizer** - MCP authorization component
            
            ### Installation
            
            #### MCP Gateway
            Add to your `spin.toml`:
            ```toml
            [component.mcp-gateway]
            source = { registry = "ghcr.io", package = "fastertools:mcp-gateway", version = "${{ needs.verify-tag.outputs.version }}" }
            ```
            
            #### MCP Authorizer
            Add to your `spin.toml`:
            ```toml
            [component.mcp-authorizer]
            source = { registry = "ghcr.io", package = "fastertools:mcp-authorizer", version = "${{ needs.verify-tag.outputs.version }}" }
            ```
            
            ### Using Latest Version
            You can also use `version = "latest"` to always get the most recent release.
            
            ### Documentation
            - [MCP Gateway README](https://github.com/fastertools/ftl/tree/main/components/mcp-gateway)
            - [MCP Authorizer README](https://github.com/fastertools/ftl/tree/main/components/mcp-authorizer)