name: Release Components

on:
  workflow_call:
    inputs:
      component:
        description: 'Component to release (mcp-gateway or mcp-authorizer)'
        required: true
        type: string
      version:
        description: 'Version to release'
        required: true
        type: string
      tag:
        description: 'Git tag for the release'
        required: true
        type: string
  push:
    tags:
      - 'mcp-gateway-v*'
      - 'mcp-authorizer-v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  verify-tag:
    name: Verify Tag on Main Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
      tag: ${{ steps.parse.outputs.tag }}
      component: ${{ steps.parse.outputs.component }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Parse tag
        id: parse
        run: |
          # Handle both workflow_call and push trigger
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            VERSION="${{ inputs.version }}"
            TAG="${{ inputs.tag }}"
            COMPONENT="${{ inputs.component }}"
          else
            # Extract component and version from tag (push trigger)
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" =~ ^(mcp-gateway|mcp-authorizer)-v(.+)$ ]]; then
              COMPONENT="${BASH_REMATCH[1]}"
              VERSION="${BASH_REMATCH[2]}"
            else
              echo "‚ùå Invalid tag format: $TAG"
              echo "Expected format: {component}-v{version}"
              exit 1
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "üì¶ Component: $COMPONENT"
          echo "üî¢ Version: $VERSION"
          echo "üè∑Ô∏è Tag: $TAG"
      
      - name: Verify tag is on main branch
        uses: ./.github/actions/verify-tag
      
      - name: Verify component version matches tag
        run: |
          VERSION="${{ steps.parse.outputs.version }}"
          COMPONENT="${{ steps.parse.outputs.component }}"
          # Check component version
          COMPONENT_VERSION=$(grep '^\s*version' components/$COMPONENT/Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$COMPONENT_VERSION" != "$VERSION" ]; then
            echo "‚ùå Tag version ($VERSION) does not match $COMPONENT version ($COMPONENT_VERSION)"
            exit 1
          fi
          echo "‚úÖ Workspace version matches tag: $VERSION"

  build-and-publish:
    name: Build and Publish Component
    needs: verify-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust for WASM
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip1
          cache-key: release-components-${{ matrix.component }}-v189
      
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component
      
      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.11.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build component
        run: |
          COMPONENT="${{ needs.verify-tag.outputs.component }}"
          cd "components/$COMPONENT"
          cargo component build --target wasm32-wasip1 --release
      
      - name: Determine WASM file name
        id: wasm
        run: |
          COMPONENT="${{ needs.verify-tag.outputs.component }}"
          # Replace hyphens with underscores (Cargo uses underscores in output names)
          WASM_NAME="${COMPONENT//-/_}.wasm"
          echo "name=$WASM_NAME" >> $GITHUB_OUTPUT
      
      - name: Publish to ghcr.io
        run: |
          COMPONENT="${{ needs.verify-tag.outputs.component }}"
          VERSION="${{ needs.verify-tag.outputs.version }}"
          WASM_FILE="../target/wasm32-wasip1/release/${{ steps.wasm.outputs.name }}"
          
          cd "components/$COMPONENT"
          
          # Debug: Check if WASM file exists
          if [ ! -f "$WASM_FILE" ]; then
            echo "‚ùå WASM file not found at: $WASM_FILE"
            echo "Looking for files in release directory:"
            ls -la ../target/wasm32-wasip1/release/
            exit 1
          fi
          
          # Publish versioned and latest tags
          wkg oci push "ghcr.io/fastertools/$COMPONENT:$VERSION" "$WASM_FILE"
          wkg oci push "ghcr.io/fastertools/$COMPONENT:latest" "$WASM_FILE"
          
          echo "‚úÖ Published $COMPONENT v$VERSION to ghcr.io"
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.verify-tag.outputs.component }}-wasm
          path: components/target/wasm32-wasip1/release/${{ steps.wasm.outputs.name }}

  create-release:
    name: Create Component Release
    needs: [verify-tag, build-and-publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ needs.verify-tag.outputs.component }} v${{ needs.verify-tag.outputs.version }}"
          tag_name: "${{ needs.verify-tag.outputs.tag }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.wasm
          body: |
            ## ${{ needs.verify-tag.outputs.component }} v${{ needs.verify-tag.outputs.version }}
            
            ### Installation
            
            Add to your `spin.toml`:
            ```toml
            [component.${{ needs.verify-tag.outputs.component }}]
            source = { registry = "ghcr.io", package = "fastertools:${{ needs.verify-tag.outputs.component }}", version = "${{ needs.verify-tag.outputs.version }}" }
            ```
            
            ### Using Latest Version
            You can also use `version = "latest"` to always get the most recent release.
            
            ### Documentation
            - [MCP Gateway README](https://github.com/fastertools/ftl/tree/main/components/mcp-gateway)
            - [MCP Authorizer README](https://github.com/fastertools/ftl/tree/main/components/mcp-authorizer)