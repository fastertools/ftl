# Release Go SDK Templates Validation
#
# WORKFLOW PURPOSE:
# This workflow handles Go module proxy-dependent validation for Go SDK template updates.
# It runs separately from the main release workflow to avoid timing issues with the Go module proxy.
#
# FLOW:
# 1. Triggered by template update PRs created by release-sdk-go.yml
# 2. Run go mod tidy on all updated templates (fails fast if proxy not ready)
# 3. Validate go.sum files with go mod verify
# 4. Test TinyGo compatibility
# 5. Push any changes back to the PR branch
#
# TIMING:
# - Fails immediately if Go module proxy doesn't have the new version yet
# - Can be rerun manually (via workflow dispatch) until proxy is ready
# - No action minutes wasted waiting - just retry when convenient
# - Separates proxy-dependent operations from immediate release process
#
name: Release Go SDK Templates Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'templates/**/go.mod'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to validate (optional, auto-detects from branch)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-templates:
    name: Validate Go Templates
    runs-on: ubuntu-latest
    # Only run on template update branches or manual dispatch
    if: contains(github.head_ref, 'update-templates-sdk-go-v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT || github.token }}
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    # Note: TinyGo compatibility testing is handled by CI workflow

    - name: Extract SDK version from branch name
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.pr_number }}" ]; then
          # Get branch name from PR number
          BRANCH_NAME=$(gh pr view ${{ inputs.pr_number }} --json headRefName -q .headRefName)
        else
          BRANCH_NAME="${{ github.head_ref }}"
        fi
        
        if [[ "$BRANCH_NAME" =~ update-templates-sdk-go-v(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "SDK Version: $VERSION"
        else
          echo "ERROR: Cannot extract version from branch name: $BRANCH_NAME"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT || github.token }}

    - name: Update template versions and validate
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "Updating Go SDK version to v$VERSION and validating templates..."
        
        # Update actual Go projects first
        for dir in examples/demo/echo-go examples/demo/multi-tools-go examples/demo/weather-go sdk/go; do
          if [ -f "$dir/go.mod" ] && grep -q 'github.com/fastertools/ftl-cli/sdk/go' "$dir/go.mod"; then
            echo "Processing Go project: $dir"
            
            # Update version
            sed -i "s|github.com/fastertools/ftl-cli/sdk/go v[^ ]*|github.com/fastertools/ftl-cli/sdk/go v$VERSION|" "$dir/go.mod"
            echo "Updated version in: $dir/go.mod"
            
            # Run go mod tidy to update go.sum
            pushd "$dir" > /dev/null
            if go mod tidy; then
              echo "Successfully ran go mod tidy in: $dir"
              
              # Verify go.sum if it exists
              if [ -f go.sum ]; then
                if go mod verify; then
                  echo "Successfully verified go.sum in: $dir"
                else
                  echo "ERROR: go mod verify failed in: $dir"
                  popd > /dev/null
                  exit 1
                fi
              fi
            else
              echo "ERROR: go mod tidy failed in: $dir"
              popd > /dev/null
              exit 1
            fi
            popd > /dev/null
          fi
        done
        
        # Process Go templates by creating temporary test projects
        find templates -name "go.mod" -type f | while read -r template_file; do
          if grep -q 'github.com/fastertools/ftl-cli/sdk/go' "$template_file"; then
            echo "Processing template: $template_file"
            
            # Create temporary directory for validation
            template_dir=$(dirname "$template_file")
            template_name=$(basename "$(dirname "$template_dir")")
            template_abs_dir="$(pwd)/$template_dir"
            temp_dir=$(mktemp -d)
            
            # Copy template content to temp directory
            cp -r "$template_dir/"* "$temp_dir/"
            
            # Resolve template variables with test values
            find "$temp_dir" -type f \( -name "*.mod" -o -name "*.go" -o -name "*.toml" \) | while read -r file; do
              sed -i 's/{{project-name | kebab_case}}/test-project/g' "$file"
              sed -i 's/{{project-name}}/test-project/g' "$file"
            done
            
            # Update SDK version in the resolved template
            if [ -f "$temp_dir/go.mod" ]; then
              sed -i "s|github.com/fastertools/ftl-cli/sdk/go v[^ ]*|github.com/fastertools/ftl-cli/sdk/go v$VERSION|" "$temp_dir/go.mod"
              
              # Run go mod tidy to validate and generate go.sum
              pushd "$temp_dir" > /dev/null
              if go mod tidy; then
                echo "Successfully validated template $template_name with SDK v$VERSION"
                
                # Verify go.sum
                if [ -f go.sum ]; then
                  if go mod verify; then
                    echo "Successfully verified go.sum for template $template_name"
                    
                    # Copy the generated go.sum back to template (if it doesn't exist or is different)
                    if [ ! -f "$template_abs_dir/go.sum" ] || ! diff -q go.sum "$template_abs_dir/go.sum" > /dev/null 2>&1; then
                      cp go.sum "$template_abs_dir/go.sum"
                      echo "Updated go.sum for template $template_name"
                    fi
                  else
                    echo "ERROR: go mod verify failed for template $template_name"
                    popd > /dev/null
                    rm -rf "$temp_dir"
                    exit 1
                  fi
                fi
              else
                echo "ERROR: go mod tidy failed for template $template_name - SDK v$VERSION may not be available in Go module proxy yet"
                popd > /dev/null
                rm -rf "$temp_dir"
                exit 1
              fi
              popd > /dev/null
            fi
            
            # Update the original template's go.mod version
            sed -i "s|github.com/fastertools/ftl-cli/sdk/go v[^ ]*|github.com/fastertools/ftl-cli/sdk/go v$VERSION|" "$template_file"
            echo "Updated SDK version in template: $template_file"
            
            # Clean up
            rm -rf "$temp_dir"
          fi
        done

    # Note: TinyGo compatibility testing moved to CI workflow for faster feedback

    - name: Setup Git
      uses: ./.github/actions/setup-git
      with:
        token: ${{ secrets.PAT || github.token }}

    - name: Commit template updates
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        VERSION="${{ steps.version.outputs.version }}"
        git commit -m "chore: update templates to use Go SDK v$VERSION" \
          -m "Updates project templates and examples to use the newly published SDK version." \
          -m "This is an automated update following the release of Go SDK v$VERSION."
        
        git push
        echo "Template update changes committed and pushed"

    - name: Add PR comment
      env:
        GH_TOKEN: ${{ secrets.PAT || github.token }}
      run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          PR_BODY=$(cat <<EOF
          ## ðŸ“¦ Update Templates to ftl-sdk v${VERSION}
          
          This PR updates project templates and examples to use the newly published ftl-sdk version.
          
          ### Changes
          - Updated Go project templates to use ftl-sdk v${VERSION}
          - Updated example projects to use ftl-sdk v${VERSION}
          
          ### Context
          This is an automated PR created after successfully publishing ftl-sdk v${VERSION} to the Go proxy.
          
          ### Checklist
          - [x] SDK v${VERSION} is available on the proxy
          - [x] Templates updated to new version
          - [x] Examples updated to new version
          - [ ] CI tests pass with new version
          
          ---
          *ðŸ¤– This PR was automatically created by the release workflow*
          EOF
          )
          
          gh pr create \
            --title "chore: update templates to ftl-sdk v${VERSION}" \
            --body "$PR_BODY" \
            --base main \
            --head "$UPDATE_BRANCH" \
            --label "automated" \
            --label "dependencies"
