# Release Go SDK Templates Validation
#
# WORKFLOW PURPOSE:
# This workflow handles Go module proxy-dependent validation for Go SDK template updates.
# It runs separately from the main release workflow to avoid timing issues with the Go module proxy.
#
# FLOW:
# 1. Triggered by template update PRs created by release-sdk-go.yml
# 2. Run go mod tidy on all updated templates (fails fast if proxy not ready)
# 3. Validate go.sum files with go mod verify
# 4. Test TinyGo compatibility
# 5. Push any changes back to the PR branch
#
# TIMING:
# - Fails immediately if Go module proxy doesn't have the new version yet
# - Can be rerun manually (via workflow dispatch) until proxy is ready
# - No action minutes wasted waiting - just retry when convenient
# - Separates proxy-dependent operations from immediate release process
#
name: Release Go SDK Templates Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'templates/**/go.mod'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to validate (optional, auto-detects from branch)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-templates:
    name: Validate Go Templates
    runs-on: ubuntu-latest
    # Only run on template update branches or manual dispatch
    if: contains(github.head_ref, 'update-templates-sdk-go-v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT || github.token }}
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    # Note: TinyGo compatibility testing is handled by CI workflow

    - name: Extract SDK version from branch name
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.pr_number }}" ]; then
          # Get branch name from PR number
          BRANCH_NAME=$(gh pr view ${{ inputs.pr_number }} --json headRefName -q .headRefName)
        else
          BRANCH_NAME="${{ github.head_ref }}"
        fi
        
        if [[ "$BRANCH_NAME" =~ update-templates-sdk-go-v(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "SDK Version: $VERSION"
        else
          echo "ERROR: Cannot extract version from branch name: $BRANCH_NAME"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT || github.token }}

    - name: Update and validate templates
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CHANGES_MADE=false
        
        echo "Running go mod tidy and validation on templates..."
        
        # Use process substitution to avoid subshell variable scope issues
        while IFS= read -r -d '' file; do
          if grep -q "github.com/fastertools/ftl-cli/sdk/go v$VERSION" "$file"; then
            echo "Processing template: $file"
            
            dir=$(dirname "$file")
            pushd "$dir" > /dev/null
            
            # Run go mod tidy to update go.sum
            if go mod tidy; then
              echo "SUCCESS: go mod tidy completed for $dir"
              
              # Verify go.sum is correct
              if [ -f go.sum ]; then
                if go mod verify; then
                  echo "SUCCESS: go.sum verification passed for $dir"
                else
                  echo "ERROR: go.sum verification failed for $dir"
                  popd > /dev/null
                  exit 1
                fi
              fi
            else
              echo "ERROR: go mod tidy failed for $dir"
              popd > /dev/null
              exit 1
            fi
            
            popd > /dev/null
            CHANGES_MADE=true
          fi
        done < <(find templates -name "go.mod" -type f -print0)
        
        # Set flag for commit step
        echo "CHANGES_MADE=$CHANGES_MADE" >> $GITHUB_ENV

    # Note: TinyGo compatibility testing moved to CI workflow for faster feedback

    - name: Setup Git
      uses: ./.github/actions/setup-git
      with:
        token: ${{ secrets.PAT || github.token }}

    - name: Commit template updates
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        VERSION="${{ steps.version.outputs.version }}"
        git commit -m "chore: validate and update Go templates for SDK v$VERSION" \
          -m "Run go mod tidy to update go.sum files and verify module checksums." \
          -m "Templates are now ready for Go SDK v$VERSION." \
          -m "" \
          -m "This commit completes the template validation process started by" \
          -m "the release-sdk-go.yml workflow. TinyGo compatibility is tested" \
          -m "separately in the CI workflow."
        
        git push
        echo "Template validation changes committed and pushed"

    - name: Add PR comment
      env:
        GH_TOKEN: ${{ secrets.PAT || github.token }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Get PR number
        if [ -n "${{ inputs.pr_number }}" ]; then
          PR_NUMBER="${{ inputs.pr_number }}"
        else
          PR_NUMBER=$(gh pr list --head ${{ github.head_ref }} --json number -q '.[0].number')
        fi
        
        if [ -n "$PR_NUMBER" ]; then
          gh pr comment $PR_NUMBER --body "## Go Template Validation Complete

SDK v$VERSION is now available in the Go module proxy and all templates have been validated:

- Go module proxy availability confirmed
- \`go mod tidy\` completed for all templates  
- \`go mod verify\` passed for all go.sum files

Templates are ready for merge!"
        else
          echo "Could not find PR number to comment on"
        fi