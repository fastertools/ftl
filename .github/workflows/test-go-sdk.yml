name: Test Go SDK

on:
  push:
    branches: [ main ]
    paths:
      - 'sdk/go/**'
      - '.github/workflows/test-go-sdk.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'sdk/go/**'
      - '.github/workflows/test-go-sdk.yml'

jobs:
  test:
    name: Test Go SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install TinyGo
      uses: acifani/setup-tinygo@v2
      with:
        tinygo-version: '0.33.0'  # Supports Go 1.21 and 1.22

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('sdk/go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      working-directory: sdk/go
      run: |
        go mod download
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run go fmt
      working-directory: sdk/go
      run: |
        fmt_output=$(go fmt ./...)
        if [ -n "$fmt_output" ]; then
          echo "The following files need formatting:"
          echo "$fmt_output"
          exit 1
        fi

    - name: Run golangci-lint
      working-directory: sdk/go
      run: golangci-lint run --build-tags test

    - name: Run tests
      working-directory: sdk/go
      run: go test -v -race -coverprofile=coverage.out -tags test ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./sdk/go/coverage.out
        flags: go-sdk
        name: go-sdk-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Verify TinyGo compatibility
      working-directory: sdk/go
      run: |
        # Verify TinyGo installation
        echo "TinyGo version:"
        tinygo version
        echo "Available targets:"
        tinygo targets | grep wasip1 || echo "wasip1 target not found"
        
        # Create a test file that imports the SDK
        cat > test_build.go << 'EOF'
        package main
        
        import (
            ftl "github.com/fastertools/ftl-cli/sdk/go"
        )
        
        func main() {
            ftl.CreateTools(map[string]ftl.ToolDefinition{
                "test": {
                    Description: "Test tool",
                    Handler: func(input map[string]interface{}) ftl.ToolResponse {
                        return ftl.Text("test")
                    },
                },
            })
        }
        EOF
        
        # Try to build with TinyGo
        echo "Building with TinyGo..."
        if tinygo build -target=wasip1 -gc=leaking -scheduler=none -no-debug -o test.wasm test_build.go; then
          echo "✅ TinyGo build successful"
          ls -la test.wasm
        else
          echo "❌ TinyGo build failed"
          exit 1
        fi
        
        # Clean up
        rm test_build.go test.wasm

    - name: Check for security vulnerabilities
      working-directory: sdk/go
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...