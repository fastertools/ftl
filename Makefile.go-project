# FTL CLI Go Makefile

# Variables
BINARY_NAME=ftl
VERSION?=dev
COMMIT=$(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_DATE=$(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
LDFLAGS=-ldflags "-X github.com/fastertools/ftl-cli/internal/cli.version=$(VERSION) -X github.com/fastertools/ftl-cli/internal/cli.commit=$(COMMIT) -X github.com/fastertools/ftl-cli/internal/cli.buildDate=$(BUILD_DATE)"

# Go parameters
GOCMD=go
GOBUILD=$(GOCMD) build
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get
GOMOD=$(GOCMD) mod
GOINSTALL=$(GOCMD) install

.PHONY: all build clean test coverage install uninstall help

## help: Show this help message
help:
	@echo 'Usage:'
	@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' | sed -e 's/^/ /'

## all: Build FTL
all: build

## build: Build the FTL CLI binary
build:
	@echo "Building FTL CLI..."
	$(GOBUILD) $(LDFLAGS) -o bin/$(BINARY_NAME) -v ./cmd/ftl

## install: Install FTL CLI to system
install: build
	@echo "Installing FTL CLI to $$(go env GOPATH)/bin..."
	@mkdir -p $$(go env GOPATH)/bin
	@cp bin/$(BINARY_NAME) $$(go env GOPATH)/bin/
	@echo "✅ FTL CLI installed to $$(go env GOPATH)/bin/$(BINARY_NAME)"
	@echo ""
	@echo "Make sure $$(go env GOPATH)/bin is in your PATH:"
	@echo '  export PATH=$$PATH:$$(go env GOPATH)/bin'

## uninstall: Remove FTL CLI from system
uninstall:
	@echo "Removing FTL CLI..."
	@rm -f $$(go env GOPATH)/bin/$(BINARY_NAME)
	@echo "✅ FTL CLI removed"

## test: Run all tests
test:
	@echo "Running all tests..."
	$(GOTEST) -v ./... -cover

## test-short: Run tests without verbose output
test-short:
	$(GOTEST) ./... -cover

## coverage: Generate test coverage report
coverage:
	@echo "Generating coverage report..."
	@$(GOTEST) -coverprofile=coverage.out ./...
	@$(GOCMD) tool cover -html=coverage.out -o coverage.html
	@$(GOCMD) tool cover -func=coverage.out | tail -1
	@echo "Coverage report generated: coverage.html"

## coverage-detailed: Generate detailed coverage with percentages per package
coverage-detailed:
	@echo "Generating detailed coverage report..."
	@$(GOTEST) -coverprofile=coverage.out ./...
	@echo ""
	@echo "Coverage by package:"
	@$(GOCMD) tool cover -func=coverage.out | grep -E "github.com/fastertools" | grep -v ".go:" || true
	@echo ""
	@echo "Overall coverage:"
	@$(GOCMD) tool cover -func=coverage.out | tail -1

## clean: Remove build artifacts
clean:
	@echo "Cleaning up..."
	@rm -rf bin/
	@rm -f coverage.out coverage.html
	@echo "✅ Cleaned"

## deps: Download dependencies
deps:
	@echo "Downloading dependencies..."
	$(GOMOD) download

## tidy: Tidy go modules
tidy:
	@echo "Tidying modules..."
	$(GOMOD) tidy

## fmt: Format code
fmt:
	@echo "Formatting code..."
	$(GOCMD) fmt ./...

## vet: Run go vet
vet:
	@echo "Running go vet..."
	$(GOCMD) vet ./...

## generate: Regenerate API client from OpenAPI spec
generate:
	@echo "Regenerating API client from OpenAPI spec..."
	@rm -f internal/api/client.gen.go
	cd internal/api && $(GOCMD) generate ./...
	@echo "✅ API client regenerated"

## run: Run FTL CLI directly
run:
	$(GOCMD) run ./cmd/ftl $(ARGS)

# Default target
.DEFAULT_GOAL := help