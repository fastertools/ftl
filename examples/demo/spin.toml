spin_manifest_version = 2

[application]
name = "ftl-mcp-demo"
version = "0.1.0"
authors = ["bowlofarugula <bowlofarugula@gmail.com>"]
description = "FTL MCP server for hosting MCP tools"

[variables]
tool_components = { default = "echo-rs,echo-ts,echo-py,weather-rs,weather-ts,weather-py,multi-tools-rs,multi-tools-ts,multi-tools-py" }

# ========================================
# Auth Gateway Configuration
# ========================================
# Authentication is DISABLED by default. To enable, set auth_enabled = "true"

# Core auth settings
auth_enabled = { default = "false" }
auth_gateway_url = { default = "http://ftl-mcp-gateway.spin.internal/mcp-internal" }
auth_trace_header = { default = "X-Trace-Id" }

# Provider configuration (required when auth_enabled = "true")
auth_provider_type = { default = "" }  # "authkit" or "oidc"
auth_provider_issuer = { default = "" }
auth_provider_audience = { default = "" }

# OIDC-specific settings (only required for auth_provider_type = "oidc")
auth_provider_name = { default = "" }
auth_provider_jwks_uri = { default = "" }
auth_provider_authorize_endpoint = { default = "" }
auth_provider_token_endpoint = { default = "" }
auth_provider_userinfo_endpoint = { default = "" }
auth_provider_allowed_domains = { default = "" }  # comma-separated list

# ========================================
# Example configurations:
# ========================================
# AuthKit:
#   auth_enabled = "true"
#   auth_provider_type = "authkit"
#   auth_provider_issuer = "https://your-tenant.authkit.app"
#   auth_provider_audience = "mcp-api"  # optional
#
# Auth0:
#   auth_enabled = "true"
#   auth_provider_type = "oidc"
#   auth_provider_name = "auth0"
#   auth_provider_issuer = "https://your-domain.auth0.com"
#   auth_provider_jwks_uri = "https://your-domain.auth0.com/.well-known/jwks.json"
#   auth_provider_authorize_endpoint = "https://your-domain.auth0.com/authorize"
#   auth_provider_token_endpoint = "https://your-domain.auth0.com/oauth/token"
#   auth_provider_userinfo_endpoint = "https://your-domain.auth0.com/userinfo"  # optional
#   auth_provider_audience = "your-api-identifier"  # optional
#   auth_provider_allowed_domains = "*.auth0.com"  # optional

# Main MCP endpoint - uses auth gateway which can be disabled via auth_config
[[trigger.http]]
route = "/mcp"
component = "mcp"

[[trigger.http]]
route = "/.well-known/oauth-protected-resource"
component = "mcp"

[[trigger.http]]
route = "/.well-known/oauth-authorization-server"
component = "mcp"

[component.mcp]
source = { registry = "ghcr.io", package = "fastertools:mcp-authorizer", version = "0.0.9" }
allowed_outbound_hosts = ["http://*.spin.internal", "https://*.authkit.app"]
[component.mcp.variables]
auth_enabled = "{{ auth_enabled }}"
auth_gateway_url = "{{ auth_gateway_url }}"
auth_trace_header = "{{ auth_trace_header }}"
auth_provider_type = "{{ auth_provider_type }}"
auth_provider_issuer = "{{ auth_provider_issuer }}"
auth_provider_audience = "{{ auth_provider_audience }}"
auth_provider_name = "{{ auth_provider_name }}"
auth_provider_jwks_uri = "{{ auth_provider_jwks_uri }}"
auth_provider_authorize_endpoint = "{{ auth_provider_authorize_endpoint }}"
auth_provider_token_endpoint = "{{ auth_provider_token_endpoint }}"
auth_provider_userinfo_endpoint = "{{ auth_provider_userinfo_endpoint }}"
auth_provider_allowed_domains = "{{ auth_provider_allowed_domains }}"

# MCP Gateway - internal endpoint
[[trigger.http]]
route = { private = true }
component = "ftl-mcp-gateway"

[component.ftl-mcp-gateway]
source = { registry = "ghcr.io", package = "fastertools:mcp-gateway", version = "0.0.9" }
allowed_outbound_hosts = ["http://*.spin.internal"]
[component.ftl-mcp-gateway.variables]
tool_components = "{{ tool_components }}"
validate_arguments = "true"

# Echo tool (Rust)
[[trigger.http]]
route = { private = true }
component = "echo-rs"

[component.echo-rs]
source = "echo-rs/target/wasm32-wasip1/release/echo_rs.wasm"
allowed_outbound_hosts = []
[component.echo-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "echo-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "echo-rs"
# Example: tool_components = { default = "existing-tool,echo-rs" }

# Echo tool (TypeScript)
[[trigger.http]]
route = { private = true }
component = "echo-ts"

[component.echo-ts]
source = "echo-ts/dist/echo-ts.wasm"
allowed_outbound_hosts = []
[component.echo-ts.build]
command = "npm install && npm run build"
workdir = "echo-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "echo-ts"
# Example: tool_components = { default = "existing-tool,echo-ts" }

# Echo tool (Python)
[[trigger.http]]
route = { private = true }
component = "echo-py"

[component.echo-py]
source = "echo-py/dist/echo-py.wasm"
allowed_outbound_hosts = []
[component.echo-py.build]
command = "./build.sh"
workdir = "echo-py"
watch = ["**/*.py", "pyproject.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "echo-py"
# Example: tool_components = { default = "existing-tool,echo-py" }

# Weather tool (Rust)
[[trigger.http]]
route = { private = true }
component = "weather-rs"

[component.weather-rs]
source = "weather-rs/target/wasm32-wasip1/release/weather_rs.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "weather-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "weather-rs"
# Example: tool_components = { default = "existing-tool,weather-rs" }

# Weather tool (TypeScript)
[[trigger.http]]
route = { private = true }
component = "weather-ts"

[component.weather-ts]
source = "weather-ts/dist/weather-ts.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-ts.build]
command = "npm install && npm run build"
workdir = "weather-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "weather-ts"
# Example: tool_components = { default = "existing-tool,weather-ts" }

# Multi-tools example (Rust) - demonstrates multiple tools in one component
[[trigger.http]]
route = { private = true }
component = "multi-tools-rs"

[component.multi-tools-rs]
source = "multi-tools-rs/target/wasm32-wasip1/release/multi_tools_rs.wasm"
allowed_outbound_hosts = []
[component.multi-tools-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "multi-tools-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "multi-tools-rs"
# Example: tool_components = { default = "existing-tool,multi-tools-rs" }

# Multi-tools example (TypeScript) - demonstrates multiple tools in one component
[[trigger.http]]
route = { private = true }
component = "multi-tools-ts"

[component.multi-tools-ts]
source = "multi-tools-ts/dist/multi-tools-ts.wasm"
allowed_outbound_hosts = []
[component.multi-tools-ts.build]
command = "npm install && npm run build"
workdir = "multi-tools-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "multi-tools-ts"
# Example: tool_components = { default = "existing-tool,multi-tools-ts" }

# Weather tool (Python)
[[trigger.http]]
route = { private = true }
component = "weather-py"

[component.weather-py]
source = "weather-py/dist/weather-py.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-py.build]
command = "./build.sh"
workdir = "weather-py"
watch = ["**/*.py", "pyproject.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "weather-py"
# Example: tool_components = { default = "existing-tool,weather-py" }

# Multi-tools example (Python) - demonstrates multiple tools in one component
[[trigger.http]]
route = { private = true }
component = "multi-tools-py"

[component.multi-tools-py]
source = "multi-tools-py/dist/multi-tools-py.wasm"
allowed_outbound_hosts = []
[component.multi-tools-py.build]
command = "./build.sh"
workdir = "multi-tools-py"
watch = ["**/*.py", "pyproject.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "multi-tools-py"
# Example: tool_components = { default = "existing-tool,multi-tools-py" }