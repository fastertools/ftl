[project]
name = "ftl-mcp-demo"
version = "0.1.0"
description = "FTL MCP server for hosting MCP tools"
authors = ["bowlofarugula <bowlofarugula@gmail.com>"]

# ========================================
# Auth Gateway Configuration
# ========================================
# Authentication is DISABLED by default. To enable, set auth_enabled = true

[auth]
enabled = false

# Uncomment and configure one of the following auth providers when enabling auth:

# For AuthKit:
# [auth.authkit]
# issuer = "https://your-tenant.authkit.app"
# audience = "mcp-api"  # optional

# For OIDC (Auth0, Okta, etc.):
# [auth.oidc]
# issuer = "https://your-domain.auth0.com"
# audience = "your-api-identifier"  # optional
# provider_name = "auth0"
# jwks_uri = "https://your-domain.auth0.com/.well-known/jwks.json"
# authorize_endpoint = "https://your-domain.auth0.com/authorize"
# token_endpoint = "https://your-domain.auth0.com/oauth/token"
# userinfo_endpoint = "https://your-domain.auth0.com/userinfo"  # optional
# allowed_domains = "*.auth0.com"  # optional

# ========================================
# Example configurations:
# ========================================
# AuthKit:
#   [auth]
#   enabled = true
#   provider = "authkit"
#   issuer = "https://your-tenant.authkit.app"
#   audience = "mcp-api"  # optional
#
# Auth0:
#   [auth]
#   enabled = true
#   provider = "oidc"
#   issuer = "https://your-domain.auth0.com"
#   audience = "your-api-identifier"  # optional
#   
#   [auth.oidc]
#   provider_name = "auth0"
#   jwks_uri = "https://your-domain.auth0.com/.well-known/jwks.json"
#   authorize_endpoint = "https://your-domain.auth0.com/authorize"
#   token_endpoint = "https://your-domain.auth0.com/oauth/token"
#   userinfo_endpoint = "https://your-domain.auth0.com/userinfo"  # optional
#   allowed_domains = "*.auth0.com"  # optional

[gateway]
version = "0.0.9"
authorizer_version = "0.0.9"
validate_arguments = true

# ========================================
# Application Variables
# ========================================
# These variables can be used by tools and overridden at runtime
# using environment variables with the SPIN_VARIABLE_ prefix

[variables]
# Variables with default values.
# These are NOT accessible to any tool components unless you explicitly configure them for that component.
# See [tools.variables-demo] for an example.
# For the demo, we provide a default token so it runs without configuration.
api_token = { default = "demo-token-12345" }
api_url = { default = "https://api.example.com" }
api_version = { default = "v2" }
environment = { default = "staging" }

# Echo tool (Rust)
[tools.echo-rs]
path = "echo-rs"
wasm = "echo-rs/target/wasm32-wasip1/release/echo_rs.wasm"
allowed_outbound_hosts = []

[tools.echo-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Echo tool (TypeScript)
[tools.echo-ts]
path = "echo-ts"
wasm = "echo-ts/dist/echo-ts.wasm"
allowed_outbound_hosts = []

[tools.echo-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Weather tool (Rust)
[tools.weather-rs]
path = "weather-rs"
wasm = "weather-rs/target/wasm32-wasip1/release/weather_rs.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[tools.weather-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Weather tool (TypeScript)
[tools.weather-ts]
path = "weather-ts"
wasm = "weather-ts/dist/weather-ts.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[tools.weather-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Multi-tools example (Rust) - demonstrates multiple tools in one component
[tools.multi-tools-rs]
path = "multi-tools-rs"
wasm = "multi-tools-rs/target/wasm32-wasip1/release/multi_tools_rs.wasm"
allowed_outbound_hosts = []

[tools.multi-tools-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Multi-tools example (TypeScript) - demonstrates multiple tools in one component
[tools.multi-tools-ts]
path = "multi-tools-ts"
wasm = "multi-tools-ts/dist/multi-tools-ts.wasm"
allowed_outbound_hosts = []

[tools.multi-tools-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Variables demo (Rust) - demonstrates using Spin variables
[tools.variables-demo]
path = "variables-demo-rs"
wasm = "variables-demo-rs/target/wasm32-wasip1/release/variables_demo_rs.wasm"
# This tool uses the application variables defined above
variables = { api_token = "{{ api_token }}", api_url = "{{ api_url }}", api_version = "{{ api_version }}", environment = "{{ environment }}" }
allowed_outbound_hosts = []

[tools.variables-demo.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]