[project]
name = "ftl-mcp-demo"
version = "0.1.0"
description = "FTL MCP server for hosting MCP tools"
authors = ["bowlofarugula <bowlofarugula@gmail.com>"]
access_control = "public"

[mcp]
# You can specify registry URIs for custom MCP authorizer and gateway components:
# gateway = "ghcr.io/myorg/custom-mcp-gateway:1.0.0"
# authorizer = "ghcr.io/myorg/custom-mcp-authorizer:1.0.0"
# Components from private repos can be accessed via `docker login`.
# See https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry
# Default components:
gateway = "ghcr.io/fastertools/mcp-gateway:0.0.12"
authorizer = "ghcr.io/fastertools/mcp-authorizer:0.0.14"
# If true, the gateway component should automatically validate tool call arguments based on tool schema.
validate_arguments = true

# ========================================
# OAuth Configuration (Optional)
# ========================================
# For private access control with custom OAuth provider
# If omitted with private mode, uses FTL's built-in AuthKit

# For custom OAuth (Auth0, Okta, etc.):
# [oauth]
# issuer = "https://your-domain.auth0.com"
# audience = "your-api-identifier"  # optional
# jwks_uri = "https://your-domain.auth0.com/.well-known/jwks.json"
# public_key = ""  # optional - PEM format public key (alternative to JWKS)
# algorithm = "RS256"  # optional - JWT signing algorithm
# required_scopes = "read,write"  # optional
# authorize_endpoint = "https://your-domain.auth0.com/authorize"  # optional - for OAuth discovery
# token_endpoint = "https://your-domain.auth0.com/oauth/token"  # optional - for OAuth discovery
# userinfo_endpoint = "https://your-domain.auth0.com/userinfo"  # optional - for OAuth discovery

# ========================================
# Example configurations:
# ========================================
# Private mode with FTL's built-in AuthKit (default for private):
#   [project]
#   access_control = "private"
#   # No [oauth] block needed - FTL will use its built-in AuthKit
#
# Private mode with custom OAuth:
#   [project]
#   access_control = "private"
#   
#   [oauth]
#   issuer = "https://your-domain.auth0.com"
#   audience = "your-api-identifier"
#   jwks_uri = "https://your-domain.auth0.com/.well-known/jwks.json"
#   required_scopes = "read,write"

# ========================================
# Application Variables
# ========================================
# These variables can be used by components and overridden at runtime
# using environment variables with the SPIN_VARIABLE_ prefix.
# Variables with names indicating sensitivity e.g. 'key', 'secret', will be handled securely.
# NEVER store actual secret values in ftl.toml!

[variables]
# Variables with default values.
# These are NOT accessible to any components unless you explicitly configure them for that component.
# See [component.variables-demo] for an example.
# For the demo, we provide a default token value so it runs without runtime configuration.
api_token = { default = "demo-token-12345" }
api_url = { default = "https://api.example.com" }
api_version = { default = "v2" }
environment = { default = "staging" }

# Echo component (Rust)
[component.echo-rs]
path = "echo-rs"
wasm = "echo-rs/target/wasm32-wasip1/release/echo_rs.wasm"
allowed_outbound_hosts = []

[component.echo-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Echo component (TypeScript)
[component.echo-ts]
path = "echo-ts"
wasm = "echo-ts/dist/echo-ts.wasm"
allowed_outbound_hosts = []

[component.echo-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Echo component (Python)
[component.echo-py]
path = "echo-py"
wasm = "echo-py/dist/app.wasm"
allowed_outbound_hosts = []

[component.echo-py.build]
command = "bash build.sh"
watch = ["app.py", "pyproject.toml"]

# Echo component (Go)
[component.echo-go]
path = "echo-go"
wasm = "echo-go/dist/echo-go.wasm"
allowed_outbound_hosts = []

[component.echo-go.build]
command = "bash build.sh"
watch = ["main.go", "go.mod"]

# Weather component (Rust)
[component.weather-rs]
path = "weather-rs"
wasm = "weather-rs/target/wasm32-wasip1/release/weather_rs.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[component.weather-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Weather component (TypeScript)
[component.weather-ts]
path = "weather-ts"
wasm = "weather-ts/dist/weather-ts.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[component.weather-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Weather component (Python)
[component.weather-py]
path = "weather-py"
wasm = "weather-py/dist/app.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[component.weather-py.build]
command = "bash build.sh"
watch = ["app.py", "pyproject.toml"]

# Weather component (Go)
[component.weather-go]
path = "weather-go"
wasm = "weather-go/dist/weather-go.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]

[component.weather-go.build]
command = "bash build.sh"
watch = ["main.go", "go.mod"]

# Multi-tools example (Rust) - demonstrates multiple tools in one component
[component.multi-tools-rs]
path = "multi-tools-rs"
wasm = "multi-tools-rs/target/wasm32-wasip1/release/multi_tools_rs.wasm"
allowed_outbound_hosts = []

[component.multi-tools-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]

# Multi-tools example (TypeScript) - demonstrates multiple tools in one component
[component.multi-tools-ts]
path = "multi-tools-ts"
wasm = "multi-tools-ts/dist/multi-tools-ts.wasm"
allowed_outbound_hosts = []

[component.multi-tools-ts.build]
command = "npm install && npm run build"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Multi-tools example (Python) - demonstrates multiple tools in one component
[component.multi-tools-py]
path = "multi-tools-py"
wasm = "multi-components-py/dist/app.wasm"
allowed_outbound_hosts = []

[component.multi-tools-py.build]
command = "bash build.sh"
watch = ["app.py", "pyproject.toml"]

# Multi-tools example (Go) - demonstrates multiple tools in one component
[component.multi-tools-go]
path = "multi-tools-go"
wasm = "multi-tools-go/dist/multi-tools-go.wasm"
allowed_outbound_hosts = []

[component.multi-tools-go.build]
command = "bash build.sh"
watch = ["main.go", "go.mod"]

# Variables demo (Rust) - demonstrates using Spin variables
[component.variables-demo]
path = "variables-demo-rs"
wasm = "variables-demo-rs/target/wasm32-wasip1/release/variables_demo_rs.wasm"
# This component uses the application variables defined above
variables = { api_token = "{{ api_token }}", api_url = "{{ api_url }}", api_version = "{{ api_version }}", environment = "{{ environment }}" }
allowed_outbound_hosts = []

[component.variables-demo.build]
command = "cargo build --target wasm32-wasip1 --release"
watch = ["src/**/*.rs", "Cargo.toml"]
